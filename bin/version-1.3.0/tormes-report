#! /bin/bash

TORMESVERSION="1.3.0"
VERSION="1.3.0"

if [ $# == 0 ]; then
cat << EOF

This is tormes-report version $VERSION, deviced for working with TORMES version $TORMESVERSION
This script generates a Rmarkdown file with the report from tormes analysis data
WARNING: positional arguments are required!

usage: $0 <working directory> <metadata> <abricate path> <tormes path> <genera>

EOF

exit 1
fi

#VARIABLES

ABRICATE=$3
DATE="$( date +"%Y-%m-%d" )"
GENERA=$5
METADATA=$2
OUTWD=$1
SAMPLE="$(<$OUTWD/list.tmp)"
TAB="$(printf '\t')"
TITLE="$(<$OUTWD/title_tormes.tmp)"
TORMESDIR=$4

#FORMATTING FILES FOR REPORT
mkdir -p $OUTWD/report_files
cp -f $METADATA $OUTWD/report_files/metadata.txt
cp -f $OUTWD/sequencing_assembly_report.txt $OUTWD/report_files/
cp -f $OUTWD/mlst/mlst*.tab $OUTWD/report_files/
cp -f $OUTWD/antimicrobial_resistance_genes/*/*tab $OUTWD/report_files/
cp -f $OUTWD/virulence_genes/*tab $OUTWD/report_files/
cp -f $OUTWD/taxonomic_identification/taxonomic-identification-kraken2.txt $OUTWD/report_files/
cp -f $OUTWD/taxonomic_identification/taxonomic-identification-16S-rRNA.RDP.txt $OUTWD/report_files/
cp -f $OUTWD/citations.txt $OUTWD/report_files/

if [ -s $OUTWD/pangenome/summary_statistics.txt ] && [ -s $OUTWD/pangenome/pangenome.png ]; then
	cp -f $OUTWD/pangenome/pangenome.png $OUTWD/report_files/
	cp -f $OUTWD/pangenome/summary_statistics.txt $OUTWD/report_files/
fi
if [ -s $OUTWD/pangenome/accessory_binary_genes.fa.newick ]; then
	cp -f $OUTWD/pangenome/accessory_binary_genes.fa.newick $OUTWD/report_files/
fi
if [ -s $OUTWD/pangenome/core_gene_alignment.newick ]; then
	cp -f $OUTWD/pangenome/core_gene_alignment.newick $OUTWD/report_files/
fi
if [ "$GENERA" == 'Escherichia' ] || [ "$GENERA" == 'Salmonella' ] || [ "$GENERA" == 'Klebsiella' ]; then
	cp -f $OUTWD/point_mutations/*/*_PointFinder_results.txt $OUTWD/report_files/
fi

## Antibiotic resistance genes summary file
for i in $SAMPLE; do
	for j in resfinder card argannot; do
   	  awk -v OFS="$TAB" -F "$TAB" '(NR>1) && ($10 > 90)' $OUTWD/report_files/$i\_$j\.tab > $OUTWD/report_files/$i\_$j\_tmp.tab
	    awk -v OFS="$TAB" -F "$TAB" '($11 > 90)' $OUTWD/report_files/$i\_$j\_tmp.tab > $OUTWD/report_files/$i\_$j\_min90.tab
	    sed -i "1i#FILE${TAB}SEQUENCE${TAB}START${TAB}END${TAB}STRAND${TAB}GENE${TAB}COVERAGE${TAB}COVERAGE_MAP${TAB}GAPS${TAB}%COVERAGE${TAB}%IDENTITY${TAB}DATABASE${TAB}ACCESSION${TAB}PRODUCT${TAB}RESISTANCE" $OUTWD/report_files/$i\_$j\_min90.tab
	    rm -f $OUTWD/report_files/$i\_$j\_tmp.tab
	done
done
for j in resfinder card argannot; do
	$ABRICATE $OUTWD/report_files/*$j\_min90.tab --summary > $OUTWD/report_files/$j\_summary.tab
done
for i in $SAMPLE; do
	for j in resfinder card argannot; do
       sed -i "s/$i\_$j\_min90.tab/$i/" $OUTWD/report_files/$j\_summary.tab
	    sed -i "s/.*report_files\///" $OUTWD/report_files/$j\_summary.tab
	done
done
for j in resfinder card argannot; do
	sed -i 's/'\''//g' $OUTWD/report_files/$j\_summary.tab
	sed -i 's/#FILE/FILE/g' $OUTWD/report_files/$j\_summary.tab
	sed -i "s/\t\./\t0/g" $OUTWD/report_files/$j\_summary.tab
	sed -i 's/[0-9]*;[0-9]*/abc/g' $OUTWD/report_files/$j\_summary.tab
	sed -i 's/abc.//g' $OUTWD/report_files/$j\_summary.tab
done

## Resfinder gene per isolate
cut -d "$TAB" -f 5 $OUTWD/report_files/*resfinder_min90.tab | sed "s/GENE//" | sed "/^$/d" | sort -u > $OUTWD/report_files/tmp1.txt
for i in $(<$OUTWD/report_files/tmp1.txt); do
	echo -e "$i\t\c" >> $OUTWD/report_files/tmp2.txt
	cat $OUTWD/report_files/*resfinder_min90.tab | grep -c $i >> $OUTWD/report_files/tmp2.txt
done
cut -d "$TAB" -f 1 $OUTWD/report_files/tmp2.txt | sed "s/_.*//" > $OUTWD/report_files/tmp3.txt
for i in $(<$OUTWD/report_files/tmp3.txt); do
	if ! grep -i "^$i\s" $TORMESDIR/../files/resfinder_notes.txt &>/dev/null; then
	    echo "Unknown" >> $OUTWD/report_files/tmp4.txt
	else
	    grep -i "^$i\s" $TORMESDIR/../files/resfinder_notes.txt | cut -f 2 >> $OUTWD/report_files/tmp4.txt
	fi
done
paste -d "$TAB" $OUTWD/report_files/tmp2.txt $OUTWD/report_files/tmp4.txt > $OUTWD/report_files/resfinder_gene_per_isolate.txt
sed -i "1iGene${TAB}Count${TAB}Resistance" $OUTWD/report_files/resfinder_gene_per_isolate.txt
#sed -i 's/'\''//g' $OUTWD/report_files/resfinder_gene_per_isolate.txt
rm -f $OUTWD/report_files/tmp*.txt
rm -f $OUTWD/report_files/*min90.tab

##Other formatting
for i in $SAMPLE; do
  for j in resfinder card argannot vfdb; do
		sed -i 's/#FILE/FILE/g' $OUTWD/report_files/${i}_${j}.tab
    sed -i 's/_length/ length/g' $OUTWD/report_files/${i}_${j}.tab
    sed -i 's/_cov/ cov/g' $OUTWD/report_files/${i}_${j}.tab
	done
done

for i in $SAMPLE; do
    for j in resfinder card argannot; do
			sed -i "s/;/, /g" $OUTWD/report_files/${i}_${j}.tab
		done
done

## CUSTOM GENES DATABASE
if [ -s $OUTWD/custom_genes_db.tmp ]; then
	mkdir $OUTWD/report_files/custom_genes_db
	for i in $(<$OUTWD/custom_genes_db.tmp); do
		cp -f ${OUTWD}/custom_genes_db/${i}/*tab $OUTWD/report_files/custom_genes_db/
	done
	for i in $SAMPLE; do
		for j in $(<$OUTWD/custom_genes_db.tmp); do
			sed -i 's/#FILE/FILE/g' $OUTWD/report_files/custom_genes_db/${i}_${j}.tab
    	sed -i 's/_length/ length/g' $OUTWD/report_files/custom_genes_db/${i}_${j}.tab
    	sed -i 's/_cov/ cov/g' $OUTWD/report_files/custom_genes_db/${i}_${j}.tab
		done
	done
fi

## GENERA
if [ "$GENERA" == 'Escherichia' ]; then
	cp -f $OUTWD/fimH_typing/fimH_typing.txt $OUTWD/report_files/
	cp -f $OUTWD/serotyping/serotyping.txt $OUTWD/report_files/
	cp -f $OUTWD/plasmids/*tab $OUTWD/report_files/
	for i in $SAMPLE; do
	    sed -i 's/#FILE/FILE/g' $OUTWD/report_files/${i}_plasmids.tab
	done
fi

if [ "$GENERA" == 'Salmonella' ]; then
  cp -f $OUTWD/serotyping/serotyping.txt $OUTWD/report_files/
  cp -f $OUTWD/plasmids/*tab $OUTWD/report_files/
  for i in $SAMPLE; do
    sed -i 's/#FILE/FILE/g' $OUTWD/report_files/${i}_plasmids.tab
  done
fi

if [ "$GENERA" == 'Klebsiella' ]; then
	cp -f $OUTWD/plasmids/*tab $OUTWD/report_files/
	for i in $SAMPLE; do
    sed -i 's/#FILE/FILE/g' $OUTWD/report_files/${i}_plasmids.tab
  done
	cut -f 1,2,3,5,6,8 $OUTWD/locus-typing/K-locus_table.txt > $OUTWD/report_files/K-locus_table.txt
	cut -f 1,2,3,5,6,8 $OUTWD/locus-typing/O-locus_table.txt > $OUTWD/report_files/O-locus_table.txt
fi

#GENERATING R-MARKDOWN FILE
cat << EOF > $OUTWD/report_files/tormes_report.Rmd
---
title: "$TITLE"
date: "$DATE"
output: html_document
---
\`\`\`{r, echo=FALSE, message=FALSE, warning=FALSE}
library(DT)
library(ggplot2)
library(ggtree)
library(knitr)
library(plotly)
library(RColorBrewer)
library(reshape2)
library(treeio)
#knitr::opts_chunk\$set(out.width="1200px", dpi=120, fig.align = "center")
knitr::opts_chunk\$set(dpi=120, fig.align = "center")
\`\`\`

TORMES version $VERSION

<br>

### Quick link to sections {.sidebar #index}
* #### [Samples description](#description)
* #### [Assembly statistics](#assembly)
* #### [Taxonomic identification](#taxonomy)
* #### [Multi-Locus Sequence Typing (MLST)](#mlst)
EOF
if [ "$GENERA" == 'Escherichia' ]; then
	echo "* #### [Serotyping](#serotype)" >> $OUTWD/report_files/tormes_report.Rmd
	echo "* #### [Fim-H Typing](#fimh)" >> $OUTWD/report_files/tormes_report.Rmd
fi
if [ "$GENERA" == 'Salmonella' ]; then
  echo "* #### [Serotyping](#serotype)" >> $OUTWD/report_files/tormes_report.Rmd
fi
if [ "$GENERA" == 'Klebsiella' ]; then
	echo "* #### [Surface polysaccharide locus typing](#locustyping)" >> $OUTWD/report_files/tormes_report.Rmd
fi
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
* #### [Pangenome analysis](#pangenome)
* #### [Antibiotic resistance](#resistance)
* #### [Virulence genes](#virulence)
EOF
if [ "$GENERA" == 'Escherichia' ] || [ "$GENERA" == 'Salmonella' ] || [ "$GENERA" == 'Klebsiella' ]; then
  echo "* #### [Plasmid replicons](#plasmids)" >> $OUTWD/report_files/tormes_report.Rmd
fi
if [ -s $OUTWD/custom_genes_db.tmp ]; then
	echo "* #### [Custom genes databases](#customgenesdb)" >> $OUTWD/report_files/tormes_report.Rmd
fi
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
* #### [Citation](#cite)

<br>

## Samples description {#description}
\`\`\`{r, echo=FALSE}
setwd("$OUTWD/report_files")
data=read.table("metadata.txt", header = T, sep = "\t", dec = ".", check.names = FALSE)
if (ncol(data)<4){
	metadata=as.data.frame(data[,1])
	print ("No more data regarding samples was provided")
} else {
	data=data[-2]
	metadata=data[-2]
}
colnames(metadata)[1]="Samples"
datatable(metadata, rownames=F, fillContainer = F, filter = 'top',
          class='cell-border stripe', style = 'default',
  options = list(
  pageLength = 20, autoWidth = TRUE,
  columnDefs = list(list(className='dt-center', targets="_all"))
  )
)
\`\`\`

<br>

[Back to index](#index)

## Assembly statistics {#assembly}
<br>

Field | Description
----- | ---------------------------------------------------------------------------------------
**Sample** | Name of the sample
**Reads** | Total number of reads after quality filtering
**AvgReadLen** | Average read length after quality filtering
**Contigs** | Number of contigs of the draft genome (>200bp)
**GenomeLength** | Length (bp) of the draft genome
**LargestContig** | Length (bp) of the largest contig in the genome
**N50** | "Length of the smallest contig in the set that contains the fewest (largest) contigs whose combined length represents at least 50% of the assembly" ([Miller *et al*., 2010](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2874646/))
**GC** | GC content (%) of the draft genome
**Depth** | Number of times each nucleotide position in the draft genome has a read that align to that position

<br>

\* *When already assembled genomes are included for TORMES analysis, "NA" will appear for "Reads", "AvgReadLen" and "Depth" fields.*

<br>

\`\`\`{r, echo=FALSE}
seqdata=read.table("sequencing_assembly_report.txt", header = T, sep = "\t", dec = ".")
colnames(seqdata)=c("Sample", "Reads", "AvgReadLen", "Contigs", "GenomeLength", "LargestContig", "N50", "GC", "Depth")
datatable(seqdata, rownames=F, fillContainer = F, filter = 'top',
          class='cell-border stripe', style = 'default',
  options = list(
  pageLength = 20, autoWidth = TRUE,
  columnDefs = list(list(className='dt-center', targets="_all"))
  )
)
\`\`\`

<br>

#### Select the parameter {.tabset .tabset-fade .tabset-pills}
##### Number of contigs
\`\`\`{r, echo=FALSE}
x=seqdata\$Sample
y=seqdata\$Contigs
a <- list(title = "Number of contigs", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar") %>%
layout(yaxis = a)
\`\`\`
Average number of contigs per sample = **\`r mean(seqdata\$Contigs)\`**

##### Genome length
\`\`\`{r, echo=FALSE}
x=seqdata\$Sample
y=seqdata\$GenomeLength
a <- list(title = "Genome length", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar") %>%
layout(yaxis = a)
\`\`\`
Average genome length per sample = **\`r mean(seqdata\$GenomeLength)\` bp**

##### Largest contig length
\`\`\`{r, echo=FALSE}
x=seqdata\$Sample
y=seqdata\$LargestContig
a <- list(title = "Largest contig length", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar") %>%
layout(yaxis = a)
\`\`\`
Average largest contig length per sample = **\`r mean(seqdata\$LargestContig)\` bp**

##### N50
\`\`\`{r, echo=FALSE}
x=seqdata\$Sample
y=seqdata\$N50
a <- list(title = "N50", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar") %>%
layout(yaxis = a)
\`\`\`
Average N50 per sample = **\`r mean(seqdata\$N50)\` bp**

##### GC content
\`\`\`{r, echo=FALSE}
options("scipen"=0, "digits"=3)
x=seqdata\$Sample
y=seqdata\$GC
a <- list(title = "GC content (%)", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar") %>%
layout(yaxis = a)
\`\`\`
Average GC content per sample = **\`r mean(seqdata\$GC)\`%**

##### Number of reads
\`\`\`{r, echo=FALSE}
options("scipen"=100, "digits"=0)
x=seqdata\$Sample
y=seqdata\$Reads
a <- list(title = "Number of reads", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar") %>%
layout(yaxis = a)
\`\`\`
Average number of reads per sample = **\`r mean(seqdata\$Reads, na.rm=TRUE)\`**

##### Average read length
\`\`\`{r, echo=FALSE}
x=seqdata\$Sample
y=seqdata\$AvgReadLen
a <- list(title = "Average read length", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar") %>%
layout(yaxis = a)
\`\`\`
Average read length per sample = **\`r mean(seqdata\$AvgReadLen, na.rm=TRUE)\` bp**

##### Sequencing depth
\`\`\`{r, echo=FALSE}
seqdata\$Depth=gsub('X','', seqdata\$Depth)
seqdata\$Depth=as.numeric(seqdata\$Depth)
x=seqdata\$Sample
y=seqdata\$Depth
a <- list(title = "Sequencing depth (X)", showticklabels = TRUE, exponentformat = "E")
plot_ly(x=x, y=y, type = "bar") %>%
layout(yaxis = a)
\`\`\`
Average sequencing depth = **\`r mean(seqdata\$Depth, na.rm=TRUE)\`X**



#

<br>

[Back to index](#index)

## Taxonomic identification {#taxonomy}
<br>
Taxonomic identification was performed by using Kraken2 ([Wood *et al*., 2019](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1891-0)). Further details can be found in the [Kraken2 webpage](https://ccb.jhu.edu/software/kraken2/index.shtml).
Additionally, 16S rRNA genes were extracted from each genome by using [Barrnap](https://github.com/tseemann/barrnap) and used for taxonomic classification by using the RDP Classifier ([Wang *et al*., 2007](https://aem.asm.org/content/73/16/5261)) at a confidence level of 0.8. Further details can be found in the [RDPTools webpage](https://github.com/rdpstaff/classifier).

<br>

### Taxonomic identification by using Kraken2

The number between brackets refers to the percentage of reads (when starting TORMES from raw reads) or contigs (when starting TORMES from already assembled genomes) from each sample covered by the clade rooted at this taxon.

<br>

\`\`\`{r, echo=FALSE}
kraken2=read.table("taxonomic-identification-kraken2.txt", header = T, sep = "\t", dec = ".")
colnames(kraken2)=c("Sample", "Family", "Genus", "Species")
kable(kraken2, results='asis', align = "c")
\`\`\`

<br>

### Taxonomic identification by using RDP Classifier

<br>

Field | Description
----- | ---------------------------------------------------------------------------------------
**Sample** | Name of the sample where the 16S rRNA gene was found. Note that the same sample might harbor more than one 16S rRNA gene copy.
**Contig** | Name of the contig where the 16S rRNA gene was found.
**Position** | Position within the contig where the 16S rRNA gene was found (begin-end). Note that the 16S rRNA genes identified for one sample might not harbor the same length (fragmented, *etc.*).
**Strand** | Strand of the 16S rRNA gene defined as forward (+) or reverse (-).
**Order** | Taxonomic order that the 16S rRNA gene was assigned over a confidence level of 0.8.
**Family** | Taxonomic family that the 16S rRNA gene was assigned over a confidence level of 0.8.
**Genus** | Taxonomic genus that the 16S rRNA gene was assigned over a confidence level of 0.8.

<br>

\`\`\`{r, echo=FALSE, error=TRUE}
rdp=read.table("taxonomic-identification-16S-rRNA.RDP.txt", header = T, sep = "\t", dec = ".")
colnames(rdp)=c("Sample", "Contig", "Position", "Strand", "Order", "Family", "Genus")
kable(rdp, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

## Multi-Locus Sequence Typing (MLST) {#mlst}
EOF

if [ "$GENERA" == 'Escherichia' ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

Further details can be found in [mlst web page](https://github.com/tseemann/mlst).

Symbol | Meaning
------ | ---------------------------------------------------------------------------------------
~ | novel full length allele similar to match
? | partial match to known allele
- | allele missing

<br>

Two MLST schemes are available for *Escherichia coli*:

<br>

\`\`\`{r, echo=FALSE, error=TRUE}
mlst1=read.table("mlst-1.tab", header = F, sep = "\t", dec = ".", row.names=1, fill=TRUE)
mlst1=as.data.frame(mlst1)
mlst1=mlst1[order(row.names(mlst1)),]
colnames(mlst1)[1]="Scheme"
colnames(mlst1)[2]="ST"
if (ncol(mlst1)>=3) {
for (i in 3:ncol(mlst1)){
        colnames(mlst1)[i]=i-2
} }
kable(mlst1, results='asis', align = "c")
\`\`\`

<br>

\`\`\`{r, echo=FALSE}
mlst2=read.table("mlst-2.tab", header = F, sep = "\t", dec = ".", row.names=1, fill=TRUE)
mlst2=as.data.frame(mlst2)
mlst2=mlst2[order(row.names(mlst2)),]
colnames(mlst2)[1]="Scheme"
colnames(mlst2)[2]="ST"
if (ncol(mlst2)>=3) {
for (i in 3:ncol(mlst2)){
        colnames(mlst2)[i]=i-2
} }
kable(mlst2, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

EOF
fi
if [ "$GENERA" != 'Escherichia' ] && [ -s $OUTWD/report_files/mlst.tab ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

Further details can be found in [mlst web page](https://github.com/tseemann/mlst).

Symbol | Meaning
------ | ---------------------------------------------------------------------------------------
~ | novel full length allele similar to match
? | partial match to known allele
- | allele missing

<br>

\`\`\`{r, echo=FALSE}
mlst=read.table("mlst.tab", header = F, sep = "\t", dec = ".", row.names=1, fill=TRUE)
mlst=as.data.frame(mlst)
mlst=mlst[order(row.names(mlst)),]
colnames(mlst)[1]="Scheme"
colnames(mlst)[2]="ST"
if (ncol(mlst)>=3) {
for (i in 3:ncol(mlst)){
	colnames(mlst)[i]=i-2
} }
kable(mlst, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

EOF
fi

if [ "$GENERA" != 'Escherichia' ] && [ ! -s $OUTWD/report_files/mlst.tab ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

WARNING: MLST analysis was not performed.

<br>

[Back to index](#index)

EOF
fi

if [ "$GENERA" == 'Escherichia' ]; then
	echo "## Serotyping {#serotype}" >> $OUTWD/report_files/tormes_report.Rmd
	if [ -s $OUTWD/report_files/serotyping.txt ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

Further information can be found in the "serotyping" directory.

\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
serotype=read.table("serotyping.txt", header = T, sep = "\t", dec = ".", row.names = 1)
serotype=as.data.frame(serotype)
colnames(serotype)= c("H Antigen", "O Antigen")
kable(serotype, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

EOF
	else
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

WARNING: serotyping for *Escherichia* was not performed.

<br>

[Back to index](#index)

EOF
	fi
	echo "## Fim-H typing {#fimh}" >> $OUTWD/report_files/tormes_report.Rmd
	if [ -s $OUTWD/report_files/fimH_typing.txt ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

Further information can be found in the "fimH_typing" directory.

\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
finhtype=read.table("fimH_typing.txt", header = F, sep = "\t", dec = ".", row.names = 1)
finhtype=as.data.frame(finhtype)
colnames(finhtype)= c("fimH typing")
kable(finhtype, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

EOF
	else
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

WARNING: FimH typing for *Escherichia* was not performed.

<br>

[Back to index](#index)

EOF
	fi
fi

if [ "$GENERA" == 'Salmonella' ]; then
	if [ -s $OUTWD/report_files/serotyping.txt ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Serotyping {#serotype}

\`\`\`{r, echo=FALSE}
serotype=read.table("serotyping.txt", header = T, sep = "\t", dec = ".")
serotype=as.data.frame(serotype)
colnames(serotype)=c("Sample", "Subspecie", "Serovar",  "Serogroup", "H1", "H2", "O Antigen", "Quality Control")
kable(serotype, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

EOF
	else
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Serotyping {#serotype}

WARNING: serotyping for *Salmonella* was not performed.

<br>

[Back to index](#index)

EOF
	fi
fi

if [ "$GENERA" == 'Klebsiella' ]; then
	if [ -s $OUTWD/report_files/K-locus_table.txt ] && [ -s $OUTWD/report_files/O-locus_table.txt ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Surface polysaccharide locus typing {#locustyping}

### K-locus typing

\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
klocus=read.table("K-locus_table.txt", header = T, sep = "\t", dec = ".", row.names = 1)
kable(klocus, results='asis', align = "c")
\`\`\`

<br>

## O-locus typing {#olocus}

\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
olocus=read.table("O-locus_table.txt", header = T, sep = "\t", dec = ".", row.names = 1)
kable(olocus, results='asis', align = "c")
\`\`\`

<br>

[Back to index](#index)

EOF
	else
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Surface polysaccharide locus typing {#locustyping}

WARNING: surface polysaccharide locus typing for *Klebsiella* was not performed.

<br>

[Back to index](#index)

EOF
	fi
fi


echo "## Pangenome analysis {#pangenome}" >> $OUTWD/report_files/tormes_report.Rmd
if [ -s $OUTWD/report_files/summary_statistics.txt ] && [ -s $OUTWD/report_files/pangenome.png ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
#### Pangenome genes summary
\`\`\`{r, echo=FALSE}
pangstats=read.table("summary_statistics.txt", header = F, sep = "\t", dec = ".")
pangstats=as.data.frame(pangstats)
colnames(pangstats)=c("Genes", "Description", "Number")
kable(pangstats, results='asis', align = "c")
\`\`\`

####
\`\`\`{r, echo=FALSE}
pangstats=read.table("summary_statistics.txt", header = F, sep = "\t", dec = ".")
pangstats=as.data.frame(pangstats)
pangstats=pangstats[,-2]
pangstats=pangstats[-5,]
colnames(pangstats)=c("Genes", "Number")
piepercent=round(100*pangstats\$Number/sum(pangstats\$Number), 1)
pie(pangstats\$Number, labels = piepercent, col = c("red2", "gold", "forestgreen", "dodgerblue4"), init.angle=90, radius=1, main="Percent of pangenome genes", clockwise = T, border = F)
par(new=TRUE)
pie(x=1, init.angle=90, col= "white", labels='', radius=0.7, border=F)
legend("center", c ("Core genes", "Soft core genes", "Shell genes", "Cloud genes"), cex = 1, fill = c("red2", "gold", "forestgreen", "dodgerblue4"))
\`\`\`


#### Schematic representation of genes presence (color) or absence (blank) between ssamples:
![](pangenome.png)

<br>

EOF
	if [ -s $OUTWD/report_files/accessory_binary_genes.fa.newick ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
#### Pangenome tree based on presence/absence of accesory genes representation {.tabset .tabset-fade .tabset-pills}
##### Rectangular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE, warning=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
treelim=20*mean(tree\$edge.length)
ggtree(tree) + geom_tiplab(size=3) + xlim_tree(treelim)
\`\`\`

##### Circular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
ggtree(tree, layout="circular") + geom_tiplab2(size=3)
\`\`\`

##### Rectangular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
ggtree(tree, branch.length="none") + geom_tiplab(size=3) + xlim_tree(11)
#El limite aqui puede ser funcion del numero de muestras
\`\`\`

##### Circular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("accessory_binary_genes.fa.newick")
ggtree(tree, layout="circular", branch.length="none") + geom_tiplab2(size=3)
\`\`\`

#


<br>

[Back to index](#index)

EOF
	else
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
WARNING: Pangenome tree based on the presence/absence of accesory genes was not generated during pangenome analysis. Please check.

<br>

[Back to index](#index)

EOF
	fi
        if [ -s $OUTWD/report_files/core_gene_alignment.newick ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
#### Pangenome tree based on core genes alignment representation {.tabset .tabset-fade .tabset-pills}
##### Rectangular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
treelim=20*mean(tree\$edge.length)
ggtree(tree) + geom_tiplab(size=3) + xlim_tree(treelim)
\`\`\`

##### Circular (phylogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
ggtree(tree, layout="circular") + geom_tiplab2(size=3)
\`\`\`

##### Rectangular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
ggtree(tree, branch.length="none") + geom_tiplab(size=3) + xlim_tree(11)
#El limite aqui puede ser funcion del numero de muestras
\`\`\`

##### Circular (cladogram)
\`\`\`{r, echo=FALSE, message=FALSE}
tree=read.newick("core_gene_alignment.newick")
ggtree(tree, layout="circular", branch.length="none") + geom_tiplab2(size=3)
\`\`\`

#


<br>

[Back to index](#index)

EOF
        else
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
WARNING: Core genes alignment tree was not generated during pangenome analysis. Please check.

<br>

[Back to index](#index)

EOF
        fi

else
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
Pangenome analysis was not performed.

<br>

[Back to index](#index)

EOF
fi
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Antimicrobial resistance {#resistance}
The search of antimicrobial resistance genes was performed by screening the genome against Resfinder ([E. Zankari *et al*., 2012](https://www.ncbi.nlm.nih.gov/pubmed/22782487)), CARD ([A.G. McArthur *et al*., 2013](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3697360/)) and ARG-ANNOT ([S.K. Gupta *et al*., 2014](https://www.ncbi.nlm.nih.gov/pubmed/24145532)) databases by using [Abricate](https://github.com/tseemann/abricate).
Any hit with coverage and/or identity below 90% was removed. If you would like to inspect hits with coverage and/or identity below 90%, please go to the corresponing TORMES output directory.

<br>

Field | Description
----- | -------------------------------------------------------------------------
**Contig** | Contig name where the gene was found
**Start** | Start position of the gene within the contig
**End** | End position of the gene within the contig
**Gene** | Antimicrobial resistance gene
**Gaps** | Gaps in subject (genome) and query (antimicrobial resistance gene)
**Coverage** | Proportion (%) of the gene covered
**Identity** | Proportion (%) of exact nucleotide matches
**Accession** | Accesion number of the antimicrobial resistance gene
**Product** | Antimicrobial resistance gene product
**Resistance** | Antimicrobial that the gene confers resistance to

<br>

#### Select the samples and the database {.tabset .tabset-fade .tabset-pills}
EOF
for i in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd
##### $i {.tabset .tabset-fade .tabset-pills}
###### Resfinder
\`\`\`{r, echo=FALSE}
ABresfinder=read.table("${i}_resfinder.tab", header = T, sep = "\t", dec = ".", quote = "")
ABresfinder=as.data.frame(ABresfinder)
Resfdata=cbind(ABresfinder[,2:4], ABresfinder[,6], ABresfinder[,9:11], ABresfinder[,13:15])
colnames(Resfdata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product", "Resistance")
ABresfinder = Resfdata[Resfdata\$Identity>90,]
ABresfinder = ABresfinder[ABresfinder\$Coverage>90,]
ABresfinder = ABresfinder[order(ABresfinder\$Gene),]
row.names(ABresfinder)=NULL
if (nrow(ABresfinder)==0){
  print ("No antimicrobial resitance genes from Resfinder database were found")
} else {
kable(ABresfinder, results='asis', align="c")
}
\`\`\`

###### CARD
\`\`\`{r, echo=FALSE}
ABcard=read.table("${i}_card.tab", header = T, sep = "\t", dec = ".", quote = "")
ABcard=as.data.frame(ABcard)
carddata=cbind(ABcard[,2:4], ABcard[,6], ABcard[,9:11], ABcard[,13:15])
colnames(carddata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product", "Resistance")
ABcard = carddata[carddata\$Identity>90,]
ABcard = ABcard[ABcard\$Coverage>90,]
ABcard = ABcard[order(ABcard\$Gene),]
row.names(ABcard)=NULL
if (nrow(ABcard)==0){
  print ("No antimicrobial resitance genes from CARD database were found")
} else {
kable(ABcard, results='asis', align="c")
}
\`\`\`

###### ARG-ANNOT
\`\`\`{r, echo=FALSE}
ABargannot=read.table("${i}_argannot.tab", header = T, sep = "\t", dec = ".", quote = "")
ABargannot=as.data.frame(ABargannot)
argannotdata=cbind(ABargannot[,2:4], ABargannot[,6], ABargannot[,9:11], ABargannot[,13:15])
colnames(argannotdata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product", "Resistance")
ABargannot = argannotdata[argannotdata\$Identity>90,]
ABargannot = ABargannot[ABargannot\$Coverage>90,]
ABargannot = ABargannot[order(ABargannot\$Gene),]
row.names(ABargannot)=NULL
if (nrow(ABargannot)==0){
  print ("No antimicrobial resitance genes from ARG-ANNOT database were found")
} else {
kable(ABargannot, results='asis', align="c")
}
\`\`\`

EOF
done

cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

#

<br>

#### Summary figures
Presence/Absence of antimicrobial resistance genes (coverage and identity > 90%) on each sample.

<br>

##### Select the database: {.tabset .tabset-fade .tabset-pills}
###### Resfinder
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
ResfinderSummary=read.table("resfinder_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
ResfinderSummary=as.data.frame(ResfinderSummary)
if (sum(ResfinderSummary\$NUM_FOUND)==0) {
  print ("No antimicrobial resitance genes from ResFinder database were found")
} else {
ResfinderSummary=ResfinderSummary[,-2]
Resfinderdatos=as.matrix(ResfinderSummary[,-1])
x=colnames(ResfinderSummary)[-1]
y=ResfinderSummary\$FILE
plot_ly(x=x, y=y, z=Resfinderdatos, type = "heatmap", colors=colorRamp(c("gainsboro", "olivedrab", "forestgreen")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
}
\`\`\`

###### CARD
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
CARDSummary=read.table("card_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
CARDSummary=as.data.frame(CARDSummary)
if (sum(CARDSummary\$NUM_FOUND)==0) {
  print ("No antimicrobial resitance genes from CARD database were found")
} else {
CARDSummary=CARDSummary[,-2]
CARDdatos=as.matrix(CARDSummary[,-1])
x=colnames(CARDSummary)[-1]
y=CARDSummary\$FILE
plot_ly(x=x, y=y, z=CARDdatos, type = "heatmap", colors=colorRamp(c("gainsboro", "firebrick1", "firebrick3")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
}
\`\`\`

###### ARG-ANNOT
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
ARGSummary=read.table("argannot_summary.tab", header = T, dec = ".", sep = "\t", check.names = FALSE)
ARGSummary=as.data.frame(ARGSummary)
if (sum(ARGSummary\$NUM_FOUND)==0) {
  print ("No antimicrobial resitance genes from ARG-ANNOT database were found")
} else {
ARGSummary=ARGSummary[,-2]
ARGdatos=as.matrix(ARGSummary[,-1])
x=colnames(ARGSummary)[-1]
y=ARGSummary\$FILE
plot_ly(x=x, y=y, z=ARGdatos, type = "heatmap", colors=colorRamp(c("gainsboro", "dodgerblue1", "dodgerblue3")), showscale=F) %>% layout(xaxis=list(type="category"), yaxis = list(autorange="reversed"))
}
\`\`\`

#


<br>

[Back to index](#index)

EOF

#### Antibiotic resistance genes (ResFinder) count -- Removed until fix bug
#\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
#seqdata=read.table("resfinder_gene_per_isolate.txt", header = T, dec = ".", sep = "\t", check.names = FALSE, quote = "")
#seqdata=as.data.frame(seqdata)
#ggplot(data=seqdata, aes(x=Gene, y=Count, fill=Resistance)) + geom_bar(stat = "identity") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) + ylab ("Number of isolates with the gene") +xlab ("Antibiotic Resistance Gene")
#plot_ly(x = seqdata\$Gene, y = seqdata\$Count, type= "bar", split =seqdata\$Resistance)
#plot_ly(x = seqdata\$Gene, y = seqdata\$Count, type= "bar", name=seqdata\$Resistance, split=seqdata\$Resistance) %>% layout(showlegend=T)
#\`\`\`

if [ "$GENERA" == 'Escherichia' ] || [ "$GENERA" == 'Salmonella' ] || [ "$GENERA" == 'Klebsiella' ]; then
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd
### Antimicrobial resistance due to point mutations
#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF

for i in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
pointfinder=read.table("${i}_PointFinder_results.txt", header = T, sep = "\t", dec = ".", quote = "")
pointfinder=as.data.frame(pointfinder)
colnames(pointfinder)=c("Mutation", "Nucleotide change", "Amino acid change", "Resistance", "PMID")
row.names(pointfinder)=NULL
if (nrow(pointfinder)==0){
  print ("No known mutations from PointFinder database were found. For unknown mutations check point_mutations directory")
} else {
kable(pointfinder, results='asis', align="c")
}
\`\`\`

EOF
done
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd

#

<br>

[Back to index](#index)

EOF
fi

cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Virulence genes {#virulence}
The search of virulence genes was performed by screening the genome against Virulence Factors Data Base (VFDB, [L. Chen *et al*., 2005](https://www.ncbi.nlm.nih.gov/pubmed/15608208)) by using [Abricate](https://github.com/tseemann/abricate). Any hit with coverage and/or identity below 90% was removed. If you would like to inspect hits with coverage and/or identity below 90%, please go to the corresponing TORMES output directory.

<br>

Field | Description
----- | -------------------------------------------------------------------------
**Contig** | Contig name where the virulence gene was found
**Start** | Start position of the virulence gene within the contig
**End** | End position of the virulence gene within the contig
**Gene** | Virulence gene
**Gaps** | Gaps in subject (genome) and query (virulence gene)
**Coverage** | Proportion (%) of the gene covered
**Identity** | Proportion (%) of exact nucleotide matches
**Accession** | Accesion number of the virulence gene
**Product** | Virulence gene product

<br>

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
for i in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
vfdb=read.table("${i}_vfdb.tab", header = T, sep = "\t", dec = ".", quote = "")
vfdb=as.data.frame(vfdb)
vfdbdata=cbind(vfdb[,2:4], vfdb[,6], vfdb[,9:11], vfdb[,13:14])
colnames(vfdbdata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
vfdb = vfdbdata[vfdbdata\$Identity>90,]
vfdb = vfdb[vfdb\$Coverage>90,]
vfdb = vfdb[order(vfdb\$Gene),]
row.names(vfdb)=NULL
if (nrow(vfdb)==0){
  print ("No virulence genes from VFDB database were found")
} else {
kable(vfdb, results='asis', align="c")
}
\`\`\`

EOF
done
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd

#

<br>

[Back to index](#index)

EOF


### CUSTOM GENES DATABASES
if [ -s $OUTWD/custom_genes_db.tmp ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Custom genes databases {#customgenesdb}

<br>

EOF
for i in $(<$OUTWD/custom_genes_db.tmp); do
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd

### Database: **${i}**

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
	for j in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd
##### ${j}
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
${i}=read.table("custom_genes_db/${j}_${i}.tab", header = T, sep = "\t", dec = ".", quote = "")
${i}=as.data.frame(${i})
${i}data=cbind(${i}[,2:4], ${i}[,6], ${i}[,9:11], ${i}[,13:14])
colnames(${i}data)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
${i} = ${i}data[${i}data\$Identity>90,]
${i} = ${i}[${i}\$Coverage>90,]
${i} = ${i}[order(${i}\$Gene),]
row.names(${i})=NULL
if (nrow(${i})==0){
  print ("No genes from ${i} custom database were found")
} else {
kable(${i}, results='asis', align="c")
}
\`\`\`

EOF
	done
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd

#

<br>

[Back to index](#index)

EOF
done

fi
###

if [ "$GENERA" == 'Escherichia' ] || [ "$GENERA" == 'Salmonella' ] || [ "$GENERA" == 'Klebsiella' ]; then
cat <<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Plasmids {#plasmids}
The search of plasmid replicons was performed by screening of the genome against PlasmidFinder database ([A. Carattoli *et al*., 2014](https://www.ncbi.nlm.nih.gov/pubmed/24777092)) by using [Abricate](https://github.com/tseemann/abricate). Any hit with coverage and/or identity below 90% was removed. If you would like to inspect hits with coverage and/or identity below 90%, please go to the corresponing TORMES output directory.

<br>

Field | Description
----- | -------------------------------------------------------------------------
**Contig** | Contig name where the plasmid replicon was found
**Start** | Start position of the plasmid replicon within the contig
**End** | End position of the plasmid replicon within the contig
**Gene** | Plasmid replicon
**Gaps** | Gaps in subject (genome) and query (plasmid replicon)
**Coverage** | Proportion (%) of the plasmid replicon covered
**Identity** | Proportion (%) of exact nucleotide matches
**Accession** | Accesion number of the plasmid replicon
**Product** | Plasmid replicon product

<br>

#### Select the sample {.tabset .tabset-fade .tabset-pills}
EOF
for i in $SAMPLE; do
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd
##### $i
\`\`\`{r, echo=FALSE, message=FALSE, error=TRUE}
plasmids=read.table("${i}_plasmids.tab", header = T, sep = "\t", dec = ".", quote = "")
plasmids=as.data.frame(plasmids)
plasmidsdata=cbind(plasmids[,2:4], plasmids[,6], plasmids[,9:11], plasmids[,13:14])
colnames(plasmidsdata)=c("Contig", "Start", "End", "Gene", "Gaps", "Coverage", "Identity", "Accession", "Product")
plasmids = plasmidsdata[plasmidsdata\$Identity>90,]
plasmids = plasmids[plasmids\$Coverage>90,]
plasmids = plasmids[order(plasmids\$Gene),]
row.names(plasmids)=NULL
if (nrow(plasmids)==0){
  print ("No plasmid replicon genes from Plasmidfinder database were found")
} else {
kable(plasmids, results='asis', align="c")
}
\`\`\`

EOF
done
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd

#

<br>

[Back to index](#index)

EOF
fi
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd
## Citation  {#cite}
If using **TORMES**, please cite it as:

<br>

<center>

Narciso Martin Quijada, David Rodriguez-Lazaro, Jose Maria Eiros, Marta Hernandez (2019).
TORMES: an automated pipeline for whole bacterial genome analysis.
*Bioinformatics*, 35(21), 4207–4212, https://doi.org/10.1093/bioinformatics/btz220.

</center>

<br>

TORMES is a pipeline that relies in many different software and databases that should be cited when using TORMES.
The following software and databases were used for this analysis:

EOF

tail -n+4 $OUTWD/report_files/citations.txt >> $OUTWD/report_files/tormes_report.Rmd
cat<<EOF >> $OUTWD/report_files/tormes_report.Rmd

[Back to index](#index)

EOF
