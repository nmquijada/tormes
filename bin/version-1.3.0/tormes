#! /bin/bash

VERSION="1.3.0"

TORMES=$0
while [ -h "$TORMES" ]; do # resolve $TORMES until the file is no longer a symlink
  TORMESDIR="$( cd -P "$( dirname "$0" )" && pwd )"
  TORMES="$(readlink "$TORMES")"
  [[ $TORMES != /* ]] && TORMES="$TORMESDIR/$TORMES" # if $TORMES is a symlink, resolve it relative to the path where the symlink file was located
done
TORMESDIR="$( cd -P "$( dirname "$TORMES" )" && pwd )"

TORMESREPORT=$TORMESDIR/tormes-report
TORMESKLEBSIELLA=$TORMESDIR/tormes-klebsiella.sh
TORMESCUSTOMGENES=$TORMESDIR/tormes-custom-genes-db.sh

# VARIABLES
ADAPTERS="$TORMESDIR/../files/adapters.fasta"
ASSEMBLER="spades"
CONFIG="$TORMESDIR/../files/config_file.txt"
CPUS=1
DATE="$( date +"%Y-%m-%d" )"
DOMLST=1
DOPANGENOME=1
FAST=1
FILTERING="prinseq"
#FIRSTBASE=0
GENERA=
GENESDB=
GENEMINID=80
GENEMINCOV=80
MAXASSEMBLYCPU=${CPUS}
METADATA=
MINLEN=125
MINCONTIGLEN=200
ONLYGENEPRED=1
OUTPUT=
OUTWD=
PRODIGALOPTS=
QUALITY=25
REFERENCE=
SAMPLE=
TAB="$(printf '\t')"
TITLEFILE=
TITLE=

ARGPARSED0=$0
ALLARGSPARSED=$@

usage () {
cat << EOF

This is TORMES version $VERSION

Developers and contributors:
  * Narciso Martin Quijada <https://github.com/nmquijada/tormes>
  * Marta Hernandez, Jose M. Eiros, David Rodriguez-Lazaro
  * David Abad <https://github.com/dabadgarcia>
  * Bradley J. Hart <https://github.com/biobrad>

For publication details, please type: $0 --citation

usage: $0 <options>

OBLIGATORY OPTIONS:
  -m/--metadata           Path to the file with the metadata regarding the samples (raw reads and/or genomes)
                          The metadata file must have an specific organization for the program to work.
                          If you don't have any or you would like to have an example or extra information, please type:
                          $0 example-metadata
  -o/--output             Path and name of the output directory

OTHER OPTIONS:
  -a/--adapter            Path to the adapters file
                          (default="$ADAPTERS")
  --assembler             Select the assembler to use. Options available: 'spades', 'megahit'
                          (default='$ASSEMBLER')
  -c/--config             Path to the configuration file with the location of all dependencies
                          (default="$CONFIG")
  --citation              Show citation
  --custom_genes_db       <string> space-separated list of custom genes databases names.
                          Requires the previous installation of the databases in TORMES (see https://github.com/nmquijada/tormes for more instructions)
  --fast                  Faster analysis (default='0')
                           * 'trimmomatic' is used for read quality filtering
                           * 'megahit' is used as assembler
                           * contig ordering and pangenome analysis are disabled
                           * only gene prediction but not annotation is performed
  --filtering             Select the software for filtering the reads.
                          Options available: 'prinseq', 'sickle', 'trimmomatic'
                          (default="$FILTERING")
  -g/--genera             Type genera name to allow special analysis (default='none')
                          Options available: 'Escherichia', 'Klebsiella', 'Salmonella'
  --gene_min_id           Minimum identity (%) of a gene against the database to be considered (default=$GENEMINID)
  --gene_min_cov          Minimum coverage (%) of a gene against the database to be considered (default=$GENEMINCOV)
  -h/--help               Show this help
  --max_cpus_per_assembly Set the maximum threads to use per assembly (default=the same as -t/--threads option)
  --min_len               Minimum length (bp) to the reads to survive after filtering (default=$MINLEN) <integer>
  --min_contig_len        Minimum length (bp) of each contig to be kept in the genome after the assembly (default=$MINCONTIGLEN) <integer>
  --no_mlst               Disable MLST analysis (default='0')
  --no_pangenome          Disable pangenome analysis (default='0')
  --only_gene_prediction  Only gene prediction (Prodigal) but not annotation of the genes (Prokka) is performed.
                          Pangenome analysis (Roary) will be also disabled (default='0')
  --prodigal_options      <string> Only whith "--only_gene_prediction". Specify further options for Prodigal (distinct to -a -d -f -i and -o)
  -q/--quality            Minimum mean phred score of the reads to survive after filtering (default=$QUALITY) <integer>
  -r/--reference          Type path to reference genome (fasta, gbk) (default='none')
                          Reference will be ONLY used for contig ordering of the draft genome
  -t/--threads            Number of threads to use (default=$CPUS) <integer>
  --title                 Path to a file containing the title in the project that will be used as title in the report
                          Avoid using special characters. TORMES will perform a default title if this option is not used
  -v/--version            Show version


For further details, please visit: https://github.com/nmquijada/tormes

EOF
}

if [ $# == 0 ]; then
	usage
	exit 1
fi

# GENERATING EXAMPLE METADATA FILE IF NEEDED

if [ "$1" == "example-metadata" ]
then
cat << EOF > samples_metadata.txt
Samples${TAB}Read1${TAB}Read2${TAB}Description${TAB}Use_as_many_descrpition_colums_as_wanted
Sample1${TAB}Directory1/S1_R1.fastq.gz${TAB}Directory1/S1_R2.fastq.gz${TAB}E.coli isolated in 2018${TAB}Colistin resistant
Sample2${TAB}Directory1/S2_R1.fastq.gz${TAB}Directory1/S2_R2.fastq.gz${TAB}E.coli isolated in 2017${TAB}Aminoglycoside resistant
Sample3${TAB}GENOME${TAB}Directory2/genome3.fasta${TAB}E.coli isolated in 2019${TAB}Colistin resistant
EOF

cat << EOF

An example "samples_metadata.txt" file has been created in the current directory!

Please, modify it in your preferred text editor by respecting the organization of the example:
	- Columns must be tab separated
	- First column must me called "Samples" and harbor samples names (avoid special characters)
	- Second column must be called "Read1" and harbor the path to the R1 read (either fastq or fastq.gz)
	- Third column must be called "Read2" and harbor the path to the R2 read (either fastq or fastq.gz)
	- Fourth (and so on) columns are descriptive. They are not needed for the program but the information will appear in the report
	  Add as much columns as you want.

TORMES allows the inclusion of already assembled genomes in the analysis. This genomes can be analyzed alone or in combination with raw sequencing data.
If you would like to include genomes in the analysis, the same metadata file has to be used by respecting the following rules:
        - Columns must be tab separated
        - First column must me called "Samples" and harbor samples names (avoid special characters)
        - Second column must be called "Read1" and has to contain the word "GENOME" (beware the capital letters!)
        - Third column must be called "Read2" and harbor the path to the genome (in FASTA format)
        - Fourth (and so on) columns are descriptive. They are not needed for the program but the information will appear in the report
          Add as much columns as you want.

ONLY ONE METADATA FILE IS NEEDED. BOTH RAW READS AND GENOMES' INFORMATION HAVE TO BE COMBINED IN THE SAME METADATA FILE.

Note: No blank fields are allowed. If there's some descriptive information lacking for any of the samples, just add something as "No data" in its corresponding field.

EOF
        exit 1
fi


# VARIABLE OPTIONS

POSITIONAL=()
while [[ $# -gt 0 ]]
do
ARGS="$1"

case $ARGS in
	-a|--adapter)
    if [ "$2" ]; then
      ADAPTER=$2
      shift 2
      if [ ! -e "$ADAPTER" ]
        then echo -e "\nERROR: $ADAPTER doesn't exist! Please check \n"
        exit 1
      fi
      if [ ! -s "$ADAPTER" ]
        then echo -e "\nERROR: Size of $ADAPTER is 0! Please check \n"
        exit 1
      fi
    else
      echo -e '\nERROR: "-a/--adapter" requires an argument\n'
      exit 1
    fi
    ;;
	--assembler)
    if [ "$2" ]; then
      if [ $2 == 'spades' ] || [ $2 == 'megahit' ]; then
        ASSEMBLER=$2
        shift 2
      else
		    echo -e '\nERROR: unknown option for "--assembler"'
		    echo 'Options available: "spades" and "megahit"'
		    echo -e "argument parsed: $2 \n"
		    exit 1
      fi
    else
      echo -e '\nERROR: "--assembler" requires an argument\n'
      echo 'Options available: "spades" and "megahit"'
      echo -e 'Default option: "spades" \n'
      exit 1
    fi
    ;;
	--citation)
    echo -e "\n If using TORMES, please cite:"
	  echo -e "\n Narciso M. Quijada, David Rodriguez-Lazaro, Jose Maria Eiros, Marta Hernandez (2019) TORMES: an automated pipeline for whole bacterial genome analysis. Bioinformatics, 35(21), 4207â€“4212, https://doi.org/10.1093/bioinformatics/btz220. \n"
    exit 1
    ;;
	-c|--config)
    if [ "$2" ]; then
      CONFIG=$2
      shift 2
      if [ ! -e "$CONFIG" ]
        then echo -e "\nERROR: $CONFIG doesn't exist! Please check \n"
        exit 1
      fi
      if [ ! -s "$CONFIG" ]
        then echo -e "\nERROR: Size of $CONFIG is 0! Please check \n"
        exit 1
      fi
    else
      echo -e '\nERROR: "-c/--config" requires an argument\n'
      exit 1
    fi
    ;;
  --custom_genes_db)
    if [ "$2" ]; then
      GENESDB=$2
      shift 2
    else
      echo -e '\nERROR: "--custom_genes_db" requires an argument\n'
      exit 1
    fi
    ;;
	--fast)
	  FAST=0
	  FILTERING="trimmomatic"
	  DOPANGENOME=0
	  ASSEMBLER="megahit"
    ONLYGENEPRED=0
	  shift
	  ;;
	--filtering)
    if [ "$2" ]; then
      if [ $2 == 'prinseq' ] || [ $2 == 'sickle' ] || [ $2 == 'trimmomatic' ]; then
        FILTERING=$2
        shift 2
      else
        echo -e '\nERROR: unknown option for "--filtering"'
        echo 'Options available: "prinseq", "sickle" and "trimmomatic"'
        echo -e "argument parsed: $2 \n"
        exit 1
      fi
    else
      echo -e '\nERROR: "--filtering" requires an argument\n'
      echo 'Options available: "prinseq", "sickle" and "trimmomatic"'
      echo -e 'Default option: "prinseq" \n'
      exit 1
    fi
    ;;
	-g|--genera)
    if [ "$2" ]; then
      if [ $2 == 'Escherichia' ] || [ $2 == 'Salmonella' ] || [ $2 == 'Klebsiella' ]; then
        GENERA=$2
        shift 2
		  else
        echo -e '\nERROR: unknown option for "-g/--genera"'
			  echo 'Genera available: Escherichia, Klebsiella, Salmonella'
			  echo 'avoid the "-g/--genera" option if your genera is not available'
			  echo -e "argument parsed: $2 \n"
		    exit 1
	    fi
    else
      echo -e '\nERROR: "-g/--genera" requires an argument'
		  echo -e 'options available: Escherichia, Klebsiella, Salmonella\n'
		  echo -e 'avoid the "-g/--genera" option if your genera is not available \n'
		  exit 1
    fi
	  ;;
  --gene_min_id)
    if [ "$2" ]; then
      if [ "$2" -eq "$2"  ] 2>/dev/null ; then
        GENEMINID=$2
        shift 2
      else
        echo -e '\nERROR: "--gene_min_id" requires a numeric argument'
        echo -e "argument parsed: $2 \n"
        exit 1
      fi
    else
      echo -e '\nERROR: "--gene_min_id" requires a numeric argument\n'
      exit 1
    fi
    ;;
  --gene_min_cov)
    if [ "$2" ]; then
      if [ "$2" -eq "$2"  ] 2>/dev/null ; then
        GENEMINCOV=$2
        shift 2
      else
        echo -e '\nERROR: "--gene_min_cov" requires a numeric argument'
        echo -e "argument parsed: $2 \n"
        exit 1
      fi
    else
      echo -e '\nERROR: "--gene_min_cov" requires a numeric argument\n'
      exit 1
    fi
    ;;
	-h|-\?|--help)
	   usage
	   exit 1
	   ;;
  -m|--metadata)
	   if [ "$2" ]; then
      METADATA=$2
      shift 2
        if [ ! -e "$METADATA" ]
          then echo -e "\nERROR: $METADATA doesn't exist! Please check \n"
          exit 1
        fi
        if [ ! -s "$METADATA" ]
          then echo -e "\nERROR: Size of $METADATA is 0! Please check \n"
          exit 1
        fi
      else
        echo -e '\nERROR: "-m/--metadata" requires an argument\n'
        exit 1
      fi
      ;;
	--min_len)
    if [ "$2" ]; then
      if [ "$2" -eq "$2"  ] 2>/dev/null ; then
        MINLEN=$2
        shift 2
      else
        echo -e '\nERROR: "--min_len" requires a numeric argument'
        echo -e "argument parsed: $2 \n"
        exit 1
      fi
    else
      echo -e '\nERROR: "--min_len" requires a numeric argument\n'
      exit 1
    fi
    ;;
  --min_contig_len)
    if [ "$2" ]; then
      if [ "$2" -eq "$2"  ] 2>/dev/null ; then
        MINCONTIGLEN=$2
        shift 2
      else
        echo -e '\nERROR: "--min_contig_len" requires a numeric argument'
        echo -e "argument parsed: $2 \n"
        exit 1
      fi
    else
      echo -e '\nERROR: "--min_contig_len" requires a numeric argument\n'
      exit 1
    fi
    ;;
	--no_mlst)
            DOMLST=0
            shift
            ;;
	--no_pangenome)
            DOPANGENOME=0
            shift
            ;;
	-o|--output)
	    if [ "$2" ]; then
                OUTPUT=$2
                shift 2
                if [ -d "$OUTPUT" ]
                    then echo -e "\nERROR: $OUTPUT already exist! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "-o/--output" requires an argument\n'
                exit 1
            fi
            ;;
  --only_gene_prediction)
    ONLYGENEPRED=0
    DOPANGENOME=0
    shift
    ;;
  --prodigal_options)
    if [ "$2" ]; then
      PRODIGALOPTS=$2
      shift 2
    else
      echo -e '\nERROR: "--prodigal_options" requires a string between quotation marks\n'
    fi
    ;;
  -q|--quality)
    if [ "$2" ]; then
      if [ "$2" -eq "$2"  ] 2>/dev/null ; then
        QUALITY=$2
        shift 2
      else
        echo -e '\nERROR: "-q/--quality" requires a numeric argument'
        echo -e "argument parsed: $2 \n"
        exit 1
      fi
    else
      echo -e '\nERROR: "-q/--quality" requires a numeric argument\n'
    fi
    ;;
  -r|--reference)
	    if [ "$2" ]; then
		REFERENCE=$2
		shift 2
		if [ ! -e "$REFERENCE" ]
		    then echo -e "\nERROR: $REFERENCE doesn't exist! Please check \n"
		    exit 1
		fi
		if [ ! -s "$REFERENCE" ]
		    then echo -e "\nERROR: Size of $REFERENCE is 0! Please check \n"
		    exit 1
		fi
	    else
		echo -e '\nERROR: "-r/--reference" requires an argument\n'
                exit 1
            fi
            ;;
	-t|--threads)
	    if [ "$2" ]; then
		if [ "$2" -eq "$2"  ] 2>/dev/null ; then
                    CPUS=$2
                    shift 2
                else
                        echo -e '\nERROR: "-t/--threads" requires a numeric argument'
                        echo -e "argument parsed: $2 \n"
                        exit 1
                fi
	    else
		echo -e '\nERROR: "-t/--threads" requires a numeric argument\n'
    exit 1
    	    fi
	    ;;
  --max_cpus_per_assembly)
      #alphabetic order changed because it needs "-t" variable
        if [ "$2" ]; then
          if [ "$2" -eq "$2"  ] 2>/dev/null ; then
            MAXASSEMBLYCPU=$2
            shift 2
          else
            echo -e '\nERROR: "--max_cpus_per_assembly" requires a numeric argument'
            echo -e "argument parsed: $2 \n"
            exit 1
          fi
        else
          echo -e '\nERROR: "--max_cpus_per_assembly" requires a numeric argument\n'
          exit 1
        fi
        if [ $MAXASSEMBLYCPU -gt $CPUS ]; then
          echo -e '\nERROR: "--max_cpus_per_assembly" cannot be greater than "-t/--threads"\n'
          exit 1
        fi
        ;;
	--title)
            if [ "$2" ]; then
                TITLEFILE=$2
                shift 2
                if [ ! -e "$TITLEFILE" ]
                    then echo -e "\nERROR: $TITLEFILE doesn't exist! Please check \n"
                    exit 1
                fi
                if [ ! -s "$TITLEFILE" ]
                    then echo -e "\nERROR: Size of $TITLEFILE is 0! Please check \n"
                    exit 1
                fi
            else
                echo -e '\nERROR: "--title" requires an argument'
		echo -e 'Avoid using "--title" if you would like a title by default\n'
                exit 1
            fi
	    ;;
	-v|--version)
	    echo "TORMES version $VERSION"
	    exit 1
	    ;;
	-?*)
	    echo -e "\nERROR: unknown option: $1 \n"
	    usage
	    exit 1
	    ;;
	*)
	    echo -e "\nERROR: unknown option: $1 \n"
            usage
            exit 1
            ;;
esac
done
set -- "${POSITIONAL[@]}" #restore positional parameters

#SOFTWARE
ABRICATE="$( grep -w "^ABRICATE\s" $CONFIG | cut -f 2 -d "$TAB" )"
BARRNAP="$( grep -w "^BARRNAP\s" $CONFIG | cut -f 2 -d "$TAB" )"
BLASTBINS="$( grep -w "^BLAST-2\.6_or_later-BINARIES\s" $CONFIG | cut -f 2 -d "$TAB" )"
CONVERT="$( grep -w "^CONVERT\s" $CONFIG | cut -f 2 -d "$TAB" )"
#FASTQC="$( grep -w "^FASTQC\s" $CONFIG | cut -f 2 -d "$TAB" )"
FASTTREE="$( grep -w "^FASTTREE\s" $CONFIG | cut -f 2 -d "$TAB" )"
FIMTYPER="$( grep -w "^FIMTYPER\s" $CONFIG | cut -f 2 -d "$TAB" )"
FIMTYPERDB="$( grep -w "^FIMTYPER-DATABASE\s" $CONFIG | cut -f 2 -d "$TAB" )"
KAPTIVE="$( grep -w "^KAPTIVE\s" $CONFIG | cut -f 2 -d "$TAB" )"
KRAKEN2="$( grep -w "^KRAKEN2\s" $CONFIG | cut -f 2 -d "$TAB" )"
KRAKENDB="$( grep -w "^KRAKEN-DATABASE\s" $CONFIG | cut -f 2 -d "$TAB" )"
MEGAHIT="$( grep -w "^MEGAHIT\s" $CONFIG | cut -f 2 -d "$TAB" )"
MAUVE="$( grep -w "^MAUVE\s" $CONFIG | cut -f 2 -d "$TAB" )"
MAUVEBINS="$( grep -w "^MAUVE-BINARIES\s" $CONFIG | cut -f 2 -d "$TAB" )"
MLST="$( grep -w "^MLST\s" $CONFIG | cut -f 2 -d "$TAB" )"
PARALLEL="$( grep -w "^PARALLEL\s" $CONFIG | cut -f 2 -d "$TAB" )"
POINTFINDER="$( grep -w "^POINTFINDER\s" $CONFIG | cut -f 2 -d "$TAB" )"
POINTFINDERDB="$( grep -w "^POINTFINDER-DATABASE\s" $CONFIG | cut -f 2 -d "$TAB" )"
PRINSEQ="$( grep -w "^PRINSEQ\s" $CONFIG | cut -f 2 -d "$TAB" )"
PRODIGAL="$( grep -w "^PRODIGAL\s" $CONFIG | cut -f 2 -d "$TAB" )"
PROKKA="$( grep -w "^PROKKA\s" $CONFIG | cut -f 2 -d "$TAB" )"
QUAST="$( grep -w "^QUAST\s" $CONFIG | cut -f 2 -d "$TAB" )"
RDPCLASSIFIER="$( grep -w "^RDP-CLASSIFIER\s" $CONFIG | cut -f 2 -d "$TAB" )"
ROARY="$( grep -w "^ROARY\s" $CONFIG | cut -f 2 -d "$TAB" )"
ROARY2SVG="$( grep -w "^ROARY2SVG\s" $CONFIG | cut -f 2 -d "$TAB" )"
RSCRIPT="$( grep -w "^RSCRIPT\s" $CONFIG | cut -f 2 -d "$TAB" )"
SEROTYPEFINDER="$( grep -w "^SEROTYPEFINDER\s" $CONFIG | cut -f 2 -d "$TAB" )"
SEROTYPEFINDERDB="$( grep -w "^SEROTYPEFINDER-DATABASE\s" $CONFIG | cut -f 2 -d "$TAB" )"
SICKLE="$( grep -w "^SICKLE\s" $CONFIG | cut -f 2 -d "$TAB" )"
SISTR="$( grep -w "^SISTR\s" $CONFIG | cut -f 2 -d "$TAB" )"
SPADES="$( grep -w "^SPADES\s" $CONFIG | cut -f 2 -d "$TAB" )"
TRIMMOMATIC="$( grep -w "^TRIMMOMATIC\s" $CONFIG | cut -f 2 -d "$TAB" )"

# CHECK OBLIGATORY VARIABLES
if [ -z "$OUTPUT" ] || [ -z "$METADATA" ]; then
	echo ""
	if [ -z "$METADATA" ]; then
           echo 'ERROR: "-m/--metadata" option is needed!'
        fi
	if [ -z "$OUTPUT" ]; then
	   echo 'ERROR: "-o/--output" option is needed!'
	fi
	echo ""
	exit 1
fi

# CHECK REDUNDANT OPTIONS
if [ "$ASSEMBLER" == 'spades' ] && [ "$FAST" -eq "0" ]; then
	echo -e '\nERROR "--fast" option cannot be used with --asembler spades\n'
	exit 1
fi
if [ "$FAST" -eq "0" ] && [ -n "$REFERENCE" ]; then
        echo -e '\nERROR "--fast" option cannot be used with a reference\n'
	exit 1
fi
if [ "$FILTERING" == 'sickle' ] && [ "$FAST" -eq "0" ]; then
        echo -e '\nERROR "--fast" option uses "trimmomatic" by default and cannot be used with --filtering sickle\n'
        exit 1
fi
if [ "$FILTERING" == 'prinseq' ] && [ "$FAST" -eq "0" ]; then
        echo -e '\nERROR "--fast" option uses "trimmomatic" by default and cannot be used with --filtering prinseq\n'
        exit 1
fi
if [[ ! -z "$PRODIGALOPTS" ]] && [ "$ONLYGENEPRED" -eq "1" ]; then
        echo -e '\nERROR "--prodigal_options" option requires "--only_gene_prediction" to be enabled\n'
        exit 1
fi



cat << EOF

Thanks for using tormes version $VERSION
Let's check that all software are properly installed and all the data included in the metadata file is correct

EOF


## CREATE WORKING DIRECTORY AND VARIABLE
mkdir -p $OUTPUT
if [ ! -d $OUTPUT ]; then
	echo -e "\nERROR: $OUTPUT could not be created in the selected location. Please check\n"
	exit 1
fi

OUTEMP="$( cd -P "$( dirname "$OUTPUT" )" && pwd )"
OUTWD="$OUTEMP/$OUTPUT"

# CHECK METADATA FORMAT
## Number of colums
head -n 1 $METADATA > $OUTWD/temp1
if [ ! -s "$OUTWD/temp1" ]; then
  echo -e "\nERROR: files could not be generated in the selected output directory (-o/--output option):"
  echo "$OUTWD"
  echo -e "Please check!\n"
  exit 1
fi

read NCOL <<< $(awk -F "$TAB" '{print NF}' $OUTWD/temp1 | sort -nu | tail -n 1)
if [ $NCOL -lt "3" ]; then
	echo -e "\nERROR: $METADATA format is incorrect (number of columns < 3), please check"
	echo -e "Type: '$0 example-metadata' for extra information\n"
	rm -f $OUTWD/temp1
	exit 1
fi
rm -f $OUTWD/temp1
read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 1)
if [ $HEADER != "Samples" ]; then
	echo -e "\nERROR: $METADATA format is incorrect (First raw first column should be named 'Samples'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi
read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 2)
if [ $HEADER != "Read1" ]; then
        echo -e "\nERROR: $METADATA format is incorrect (First raw second column should be named 'Read1'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi
read HEADER <<< $(head -n 1 $METADATA | cut -d "$TAB" -f 3)
if [ $HEADER != "Read2" ]; then
        echo -e "\nERROR: $METADATA format is incorrect (First raw third column should be named 'Read2'), please check"
        echo -e "Type: '$0 example-metadata' for extra information\n"
        exit 1
fi

## Samples names and files are unique
duplicate_check() {
	{ sort | uniq -d | grep . -qc; } < "$1"
}

tail -n +2 $METADATA > $OUTWD/temp1
cut -f 1 -d "$TAB" $OUTWD/temp1 > $OUTWD/temp2
if duplicate_check $OUTWD/temp2; then
	echo -e "\nERROR: some samples names are equal! Please check\n"
	rm -f $OUTWD/temp2
	exit 1
fi
rm -f $OUTWD/temp2

## Check that there are no empty fields in metadata
for i in $(seq 1 $NCOL); do
	cut -f $i -d "$TAB" $METADATA > $OUTWD/temp$i
	read TEMP1 <<< $(grep -cvE '[^[:space:]]' $OUTWD/temp$i)
	if [ $TEMP1 -gt "0" ]; then
	    echo -e "\nERROR: Some fields in $METADATA are blank! Please check\n"
	    rm -f $OUTWD/temp$i
	    exit 1
	fi
	rm -f $OUTWD/temp$i
done

###### Split metadata file for genomes and reads
cp $METADATA $OUTWD/metadata.tmp
cat << EOF >> $OUTWD/metadata.R
metadata=read.table("$OUTWD/metadata.tmp", header = T, sep = "\t", dec = ".")
genomes=subset(metadata, Read1=="GENOME")
write.table(genomes, file="$OUTWD/genomes.tmp", sep = "\t", quote = F, col.names = F, row.names = F)
reads=subset(metadata, Read1!="GENOME")
write.table(reads, file="$OUTWD/reads.tmp", sep = "\t", quote = F, col.names = F, row.names = F)
EOF
chmod 775 $OUTWD/metadata.R
$RSCRIPT $OUTWD/metadata.R
rm $OUTWD/metadata.R $OUTWD/metadata.tmp
###### The duplicate check is already performed before
if [ -s $OUTWD/reads.tmp ]; then
	for i in 2 3; do
		cut -f $i -d "$TAB" $OUTWD/reads.tmp > $OUTWD/temp2
		if duplicate_check $OUTWD/temp2; then
            	echo -e "\nERROR: some reads are equal in different samples! Please check\n"
            	rm -f $OUTWD/temp2
            	exit 1
		fi
	done
fi
if [ -s $OUTWD/genomes.tmp ]; then
	cut -f 3 -d "$TAB" $OUTWD/genomes.tmp > $OUTWD/temp4
	if duplicate_check $OUTWD/temp4; then
		echo -e "\nERROR: some genomes are equal in different samples! Please check\n"
		rm -f $OUTWD/temp4
		exit 1
	fi
  rm -f $OUTWD/temp4
fi

## Check that reads files exist and aren't empty
#Read1
cut -f 2 -d "$TAB" $OUTWD/reads.tmp > $OUTWD/temp2
for i in $(<$OUTWD/temp2); do
  if [ ! -e "$i" ]
    then echo -e "\nERROR: $i doesn't exist! Please check \n"
    	   rm -f $OUTWD/temp2 $OUTWD/reads.tmp $OUTWD/genomes.tmp
         exit 1
  fi
  if [ ! -s "$i" ]; then
    echo -e "\nERROR: $i is empty! Please check \n"
	  rm -f $OUTWD/temp2 $OUTWD/reads.tmp $OUTWD/genomes.tmp
    exit 1
  fi
done
rm -f $OUTWD/temp2
#Read2 and genomes
tail -n +2 $METADATA > $OUTWD/temp1
cut -f 3 -d "$TAB" $OUTWD/temp1 > $OUTWD/temp2
for i in $(<$OUTWD/temp2); do
        if [ ! -e "$i" ]
            then echo -e "\nERROR: $i doesn't exist! Please check \n"
            rm -f $OUTWD/temp1 $OUTWD/temp2 $OUTWD/reads.tmp $OUTWD/genomes.tmp
            exit 1
        fi
        if [ ! -s "$i" ]
            then echo -e "\nERROR: $i is empty! Please check \n"
            rm -f $OUTWD/temp1 $OUTWD/temp2 $OUTWD/reads.tmp $OUTWD/genomes.tmp
            exit 1
        fi
done
rm -f $OUTWD/temp1 $OUTWD/temp2 $OUTWD/reads.tmp $OUTWD/genomes.tmp

#CHECK CUSTOM GENES DATABASE
if [ ! -z "$GENESDB" ]; then
  for i in $GENESDB; do
    if [ -d "${TORMESDIR}/../db/${i}" ]; then
      echo "Custom genes database directory exists: $i"
    else
      echo -e "\nERROR: $i database is not properly formatted for TORMES"
      echo -e "Please consult the TORMES wiki for further instructions (https://github.com/nmquijada/tormes/wiki) \n"
      exit 1
    fi
    if [ ! -s "${TORMESDIR}/../db/${i}/sequences" ]; then
      echo -e "\nERROR: $i database is not properly formatted for TORMES"
      echo -e "Please consult the TORMES wiki for further instructions (https://github.com/nmquijada/tormes/wiki) \n"
      exit 1
    fi
  done
fi

# CHECK DEPENDENCIES
dependencies=(
ABRICATE
BARRNAP
CONVERT
FASTTREE
FIMTYPER
KAPTIVE
KRAKEN2
MEGAHIT
MLST
PARALLEL
POINTFINDER
PRINSEQ
PRODIGAL
PROKKA
QUAST
RDPCLASSIFIER
ROARY
ROARY2SVG
RSCRIPT
SEROTYPEFINDER
SICKLE
SISTR
SPADES
TRIMMOMATIC
)

for i in "${dependencies[@]}"; do
  if [[ -z ${!i} ]]; then
    echo -e "\nERROR: Software ${i} not found!"
    echo -e "Please check if the software path in $CONFIG is incorrect\n"
    exit 1
  else
    echo -e "Software ${i} set to: \c"
    echo "${!i}";
  fi
  if command -v ${!i} >/dev/null 2>&1 ; then
    echo "Software: ${!i} found"
  else
    echo -e "\nERROR: Software ${i} not found! Please check if:"
    echo -e "\t * Software is not installed"
    echo -e "\t * Software is installed but the path in $CONFIG is incorrect\n"
    exit 1
  fi
done

## MAUVE
if [ -z "$MAUVE" ]; then
  echo -e "\nERROR: Software MAUVE not found!"
  echo -e "Please check if the software path in $CONFIG is incorrect\n"
  exit 1
fi
if [ -s $MAUVE ]; then
	echo "Software: $MAUVE found"
else
	echo -e "\nERROR: Software $MAUVE not found! Please check if:"
  echo -e "\t * Software is not installed"
  echo -e "\t * Software is installed but the path in $CONFIG is incorrect\n"
  exit 1
fi
if command -v $MAUVEBINS/progressiveMauve >/dev/null 2>&1 ; then
  echo "Binaries for MAUVE found"
	export PATH=$MAUVEBINS:$PATH
else
  echo -e "\nERROR: Binaries for MAUVE not found! Please check if:"
  echo -e "\t * Binaries are not installed"
  echo -e "\t * Binaries are installed but the path in $CONFIG is incorrect\n"
  exit 1
fi

# KRAKENDB
if [ -z "$KRAKENDB" ]; then
  echo -e "\nERROR: KRAKEN-DATABASE not found!"
  echo -e "Please check if the software path in $CONFIG is incorrect\n"
  exit 1
fi
if [ -d "$KRAKENDB" ]; then
  echo "Directory for $KRAKENDB found"
else
  echo -e "\nERROR: Directory for $KRAKENDB not found! Please check if:"
  echo -e "\t * Database is not installed"
  echo -e "\t * Database is installed but the path in $CONFIG is incorrect\n"
  exit 1
fi

#### BLASTBINS
if [ -z "$BLASTBINS" ]; then
  echo -e "\nERROR: Software BLAST-2.6_or_later-BINARIES not found!"
  echo -e "Please check if the software path in $CONFIG is incorrect\n"
  exit 1
fi
if command -v $BLASTBINS/blastn >/dev/null 2>&1 ; then
  echo "Binaries for BLAST version 2.6 or later found"
else
  echo -e "\nERROR: Binaries for BLAST version 2.6 or later required when -g/--genera \'$GENERA\' not found! Please check if:"
  echo -e "\t * Binaries are not installed"
  echo -e "\t * Binaries are installed but the path in $CONFIG is incorrect"
  echo -e "\t   (it should be the path to blast-2.6 (or later)  main folder, where 'bin' directory is placed)\n"
  exit 1
fi

# START WORKING
## citations.txt
touch $OUTWD/citations.txt
cat << EOF >> $OUTWD/citations.txt
Please cite the following software and databases when using this data for your publication:

* TORMES, [N.M. Quijada *et al*., 2019](https://doi.org/10.1093/bioinformatics/btz220)
* GNU Parallel, [O. Tange, 2018](https://doi.org/10.5281/zenodo.1146014)
EOF

## CREATE SAMPLES VARIABLE
SAMPLE="$( tail -n +2 $METADATA | cut -f 1 -d "$TAB" )"
tail -n +2 $METADATA | cut -f 1 -d "$TAB" > $OUTWD/list.tmp

cat << EOF >> $OUTWD/metadata.R
metadata=read.table("$METADATA", header = T, sep = "\t", dec = ".")
genomes=subset(metadata, Read1=="GENOME")
write.table(genomes, file="$OUTWD/genomes.tmp", sep = "\t", quote = F, col.names = F, row.names = F)
reads=subset(metadata, Read1!="GENOME")
write.table(reads, file="$OUTWD/reads.tmp", sep = "\t", quote = F, col.names = F, row.names = F)
EOF
chmod 775 $OUTWD/metadata.R
$RSCRIPT $OUTWD/metadata.R
rm $OUTWD/metadata.R
cut -f 1 -d "$TAB" $OUTWD/genomes.tmp > $OUTWD/genomes-list.tmp
cut -f 1 -d "$TAB" $OUTWD/reads.tmp > $OUTWD/reads-list.tmp

cat << EOF

- All the software is properly installed.
- The data included in the metadata file is correct.

tormes version $VERSION analysis will start now

Status can be seen in "$OUTWD/tormes.log"

EOF

cat << EOF >> $OUTWD/tormes.log

This is tormes version $VERSION

Script used:
$ARGPARSED0 $ALLARGSPARSED

Parameters set:
	- Metadata file: $METADATA
	- Output directory: $OUTWD
	- Number of threads to use: $CPUS
EOF

if [ ! -z $REFERENCE ]; then
        echo -e "$TAB- Reference used: $REFERENCE \n" >> $OUTWD/tormes.log
fi
if [ ! -z $GENERA ]; then
	echo -e "$TAB- Special analysis enabled for: $GENERA \n" >> $OUTWD/tormes.log
else
	echo "" >> $OUTWD/tormes.log
fi
READSNUM=$(wc -l $OUTWD/reads.tmp | cut -f 1 -d " ")
GENOMESNUM=$(wc -l $OUTWD/genomes.tmp | cut -f 1 -d " ")
cat << EOF >> $OUTWD/tormes.log

The analysis will be performed for:
	- Number of samples from raw reads: $READSNUM
	- Number of samples from genomes: $GENOMESNUM

EOF
echo -e "TORMES pipeline started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
echo "" >> $OUTWD/tormes.log

####### If there are sequencing reads, then...
READMETADATA=$OUTWD/reads.tmp
READS="$(<$OUTWD/reads-list.tmp)"
if [ -s "$READMETADATA" ]; then
  mkdir -p $OUTWD/Raw_reads
  for i in $READS; do
    DIRR1="$( grep -w "^$i" $READMETADATA | cut -f 2 -d "$TAB" )"
    DIRR2="$( grep -w "^$i" $READMETADATA | cut -f 3 -d "$TAB" )"
    if [[ $DIRR1 =~ \.gz$ ]]; then
      cp -f $DIRR1 $OUTWD/Raw_reads/${i}_R1.fastq.gz
  	else
	    cp -f $DIRR1 $OUTWD/Raw_reads/${i}_R1.fastq
	  fi
	  if [[ $DIRR2 =~ \.gz$ ]]; then
      cp -f $DIRR2 $OUTWD/Raw_reads/${i}_R2.fastq.gz
    else
      cp -f $DIRR2 $OUTWD/Raw_reads/${i}_R2.fastq
    fi
  done

  if ls $OUTWD/Raw_reads/*fastq &>>/dev/null; then
    echo -e "\nSome reads are not gzipped... Let's gzip for optimize speed!\n"
    sleep 1
	  $PARALLEL -j $CPUS --gnu gzip ::: $OUTWD/Raw_reads/*fastq
  else
    echo -e "\nAll reads are already gzipped... Good! Let's proceed\n"
    sleep 1
  fi
fi

## QUALITY FILTERING AND ADAPTER TRIMMING
if [ -s "$READMETADATA" ]; then

echo -e "\nQuality filtering process started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log

mkdir -p $OUTWD/cleaned_reads

if [ "$FILTERING" == 'trimmomatic' ]; then
  echo -e "$TAB- Software for filtering chosen: trimmomatic" >> $OUTWD/tormes.log
  echo -e "$TAB- Minimum quality of reads to survive: $QUALITY" >> $OUTWD/tormes.log
  echo -e "$TAB- Minimum length of reads to survive: $MINLEN" >> $OUTWD/tormes.log
  echo -e "* Trimmomatic, [A.M. Bolger *et al*., 2014](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4103590/)" >> $OUTWD/citations.txt
	for i in $READS; do
		$TRIMMOMATIC PE -threads $CPUS -phred33 $OUTWD/Raw_reads/$i\_R1.fastq.gz $OUTWD/Raw_reads/$i\_R2.fastq.gz $OUTWD/cleaned_reads/$i\.ok_1.fastq.gz /dev/null $OUTWD/cleaned_reads/$i\.ok_2.fastq.gz /dev/null ILLUMINACLIP:$ADAPTERS:1:30:11 LEADING:${QUALITY} TRAILING:${QUALITY} MINLEN:${MINLEN}
	done
else
	for i in $READS; do
		$TRIMMOMATIC PE -threads $CPUS -phred33 $OUTWD/Raw_reads/$i\_R1.fastq.gz $OUTWD/Raw_reads/$i\_R2.fastq.gz $OUTWD/cleaned_reads/$i\.noadapt.R1.fastq.gz /dev/null $OUTWD/cleaned_reads/$i\.noadapt.R2.fastq.gz /dev/null ILLUMINACLIP:$ADAPTERS:1:30:11
	done
fi

$PARALLEL -j $CPUS --gnu rm -rf ::: $OUTWD/Raw_reads/

if [ "$FILTERING" == 'prinseq' ]; then
  echo -e "$TAB- Software for filtering chosen: prinseq" >> $OUTWD/tormes.log
  echo -e "$TAB- Minimum quality of reads to survive: $QUALITY" >> $OUTWD/tormes.log
  echo -e "$TAB- Minimum length of reads to survive: $MINLEN" >> $OUTWD/tormes.log
  echo -e "* Prinseq, [R. Schmieder and R. Edwards, 2011](https://www.ncbi.nlm.nih.gov/pubmed/21278185)" >> $OUTWD/citations.txt
	$PARALLEL -j $CPUS --gnu gzip -d ::: $OUTWD/cleaned_reads/*gz

	$PARALLEL -j $CPUS -a $OUTWD/reads-list.tmp perl $PRINSEQ -verbose -fastq $OUTWD/cleaned_reads/{}.noadapt.R1.fastq -fastq2 $OUTWD/cleaned_reads/{}.noadapt.R2.fastq -out_good $OUTWD/cleaned_reads/{}.ok -out_format 3 -out_bad null -min_len $MINLEN -min_qual_mean $QUALITY -trim_qual_right $QUALITY -trim_qual_window 15 -trim_qual_type mean

	$PARALLEL -j $CPUS --gnu rm -f ::: $OUTWD/cleaned_reads/*singletons*
	$PARALLEL -j $CPUS --gnu rm -rf ::: $OUTWD/cleaned_reads/*noadapt*
	$PARALLEL -j $CPUS --gnu gzip ::: $OUTWD/cleaned_reads/*fastq
fi
if [ "$FILTERING" == 'sickle' ]; then
  echo -e "$TAB- Software for filtering chosen: sickle" >> $OUTWD/tormes.log
  echo -e "$TAB- Minimum quality of reads to survive: $QUALITY" >> $OUTWD/tormes.log
  echo -e "$TAB- Minimum length of reads to survive: $MINLEN" >> $OUTWD/tormes.log
  echo -e "* Sickle, [Joshi and Fass, 2011](https://github.com/najoshi/sickle)" >> $OUTWD/citations.txt
	$PARALLEL -j $CPUS -a $OUTWD/reads-list.tmp $SICKLE pe -g -f $OUTWD/cleaned_reads/{}.noadapt.R1.fastq.gz -r $OUTWD/cleaned_reads/{}.noadapt.R2.fastq.gz -o $OUTWD/cleaned_reads/{}.ok_1.fastq.gz -p $OUTWD/cleaned_reads/{}.ok_2.fastq.gz -s $OUTWD/cleaned_reads/{}.single.fastq.gz -t sanger -l $MINLEN -q $QUALITY
	$PARALLEL -j $CPUS --gnu rm -f ::: $OUTWD/cleaned_reads/*single*
	$PARALLEL -j $CPUS --gnu rm -rf ::: $OUTWD/cleaned_reads/*noadapt*
fi

# Check if some samples did not generate cleaned reads
for i in $READS; do
        if [ ! -e $OUTWD/cleaned_reads/${i}.ok_1.fastq.gz ]; then
            echo -e "$TAB- WARNING: $i failed to overcome the quality control and will be excluded for further analysis" >> $OUTWD/tormes.log
	          echo "$i" >> $OUTWD/excludinglist.tmp
        fi
done
if [ -e $OUTWD/excludinglist.tmp ]; then
	awk 'NR==FNR{a[$0]=1;next}!a[$0]' $OUTWD/excludinglist.tmp $OUTWD/reads-list.tmp > $OUTWD/list2.tmp
	mv $OUTWD/list2.tmp $OUTWD/reads-list.tmp
	READS="$(<$OUTWD/reads-list.tmp)"
	rm -f $OUTWD/excludinglist.tmp
fi

# Quality filtering stats
for i in $READS; do
	zcat $OUTWD/cleaned_reads/$i\.ok_*.fastq.gz | awk 'BEGIN { t=0.0;sq=0.0; n=0;} ;NR%4==2 {n++;L=length($0);t+=L;sq+=L*L;}END{m=t/n;printf("total\tavg\n%d\t%f\n",n,m,sq/n-m*m);}' > $OUTWD/cleaned_reads/$i\.ok.stats
	sed -i 's/\..*//' $OUTWD/cleaned_reads/$i\.ok.stats
done

# Number of reads surviving to log file
for i in $READS; do
   echo -e "${TAB}${TAB}- Number of reads surviving for sample ${i}: \c" >> $OUTWD/tormes.log
   cut -f 1 $OUTWD/cleaned_reads/${i}.ok.stats | tail -n 1 >> $OUTWD/tormes.log
done

fi

### Chechking quality with FASTQC --> X11 fails in some machines --> Function disabled till fixing
#if [ -s "$READMETADATA" ]; then
#for i in 1 2; do
#	$PARALLEL -j $CPUS -a $OUTWD/reads-list.tmp $FASTQC $OUTWD/cleaned_reads/{}.ok_${i}.fastq.gz -t 1 -o $OUTWD/cleaned_reads/
#done
#rm $OUTWD/cleaned_reads/*zip
#fi

## ASSEMBLY
if [ -s "$READMETADATA" ]; then

echo -e "\nAssembly started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
mkdir -p $OUTWD/assembly
mkdir -p $OUTWD/genomes

ASSEMBLYJOBS=$(echo "${CPUS}/${MAXASSEMBLYCPU}" | bc)

if [ "$ASSEMBLER" == 'spades' ]; then
  echo -e "$TAB- Software for genome assembly chosen: spades" >> $OUTWD/tormes.log
  echo -e "* SPAdes, [A. Bankevich *et al*., 2012](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3342519/)" >> $OUTWD/citations.txt
	if [ ${ASSEMBLYJOBS} -gt 1 ]; then
		$PARALLEL -j ${ASSEMBLYJOBS} -a $OUTWD/reads-list.tmp python $SPADES --careful -1 $OUTWD/cleaned_reads/{}.ok_1.fastq.gz -2 $OUTWD/cleaned_reads/{}.ok_2.fastq.gz -o $OUTWD/assembly/{}_assembly -t 8
	else
		for i in $READS; do
		     python $SPADES --careful -1 $OUTWD/cleaned_reads/$i\.ok_1.fastq.gz -2 $OUTWD/cleaned_reads/$i\.ok_2.fastq.gz -o $OUTWD/assembly/$i\_assembly -t $CPUS
		done
	fi
fi

if [ "$ASSEMBLER" == 'megahit' ]; then
  echo -e "$TAB- Software for genome assembly chosen: megahit" >> $OUTWD/tormes.log
  echo -e "* MEGAHIT, [Li *et al*., 2015](https://pubmed.ncbi.nlm.nih.gov/25609793/)" >> $OUTWD/citations.txt
  if [ ${ASSEMBLYJOBS} -gt 1 ]; then
    $PARALLEL -j ${ASSEMBLYJOBS} -a $OUTWD/reads-list.tmp $MEGAHIT -1 $OUTWD/cleaned_reads/{}.ok_1.fastq.gz -2 $OUTWD/cleaned_reads/{}.ok_2.fastq.gz -o $OUTWD/assembly/{}_assembly -t 8
  else
    for i in $READS; do
      $MEGAHIT -1 $OUTWD/cleaned_reads/$i\.ok_1.fastq.gz -2 $OUTWD/cleaned_reads/$i\.ok_2.fastq.gz -o $OUTWD/assembly/$i\_assembly -t $CPUS
    done
  fi
	for i in $READS; do
		mv $OUTWD/assembly/$i\_assembly/final.contigs.fa $OUTWD/assembly/$i\_assembly/contigs.fasta
	done
fi

for i in $READS; do
        if [ ! -e $OUTWD/assembly/$i\_assembly/contigs.fasta ]; then
            echo -e "$TAB- WARNING: $i did not generate an assembly file and will be excluded for further analysis" >> $OUTWD/tormes.log
	    echo "$i" >> $OUTWD/excludinglist.tmp
        fi
done
if [ -e $OUTWD/excludinglist.tmp ]; then
	awk 'NR==FNR{a[$0]=1;next}!a[$0]' $OUTWD/excludinglist.tmp $OUTWD/reads-list.tmp > $OUTWD/list2.tmp
	mv $OUTWD/list2.tmp $OUTWD/reads-list.tmp
	READS="$(<$OUTWD/reads-list.tmp)"
	rm -f $OUTWD/excludinglist.tmp
fi

if [ "$FILTERING" != 'prinseq' ]; then
  echo -e "* Prinseq, [R. Schmieder and R. Edwards, 2011](https://www.ncbi.nlm.nih.gov/pubmed/21278185)" >> $OUTWD/citations.txt
fi

$PARALLEL -j $CPUS -a $OUTWD/reads-list.tmp perl $PRINSEQ -fasta $OUTWD/assembly/{}\_assembly/contigs.fasta -min_len $MINCONTIGLEN -out_good $OUTWD/genomes/{} -out_bad null

for i in $READS; do
	if [ ! -e $OUTWD/genomes/${i}.fasta ]; then
		echo -e "$TAB- WARNING: $i assembly did not passed the quality control and will be excluded for further analysis" >> $OUTWD/tormes.log
		echo "$i" >> $OUTWD/excludinglist.tmp
	fi
done
if [ -e $OUTWD/excludinglist.tmp ]; then
        awk 'NR==FNR{a[$0]=1;next}!a[$0]' $OUTWD/excludinglist.tmp $OUTWD/reads-list.tmp > $OUTWD/list2.tmp
        mv $OUTWD/list2.tmp $OUTWD/reads-list.tmp
        READS="$(<$OUTWD/reads-list.tmp)"
        rm -f $OUTWD/excludinglist.tmp
fi

#parallel -j $CPUS --gnu rm -rf ::: $OUTWD/genomes/1/
$PARALLEL -j $CPUS -a $OUTWD/reads-list.tmp --gnu tar cfz $OUTWD/assembly/{}\_assembly.tgz -C $OUTWD/assembly/ {}\_assembly
$PARALLEL -j $CPUS -a $OUTWD/reads-list.tmp --gnu rm -rf $OUTWD/assembly/{}\_assembly

fi

## Genomes stats for TORMES assembled genomes
mkdir $OUTWD/genome_stats
echo -e "* QUAST, [A. Gurevich *et al*., 2013](https://www.ncbi.nlm.nih.gov/pubmed/23422339)" >> $OUTWD/citations.txt

if [ -s "$READMETADATA" ]; then

for i in $READS; do
	$QUAST $OUTWD/genomes/${i}.fasta -o $OUTWD/genome_stats/${i}_genome_stats -t $CPUS --min-contig $MINCONTIGLEN --no-icarus --silent --no-sv
  echo -e "${TAB}${TAB}- Number of contigs in genome ${i}: \c" >> $OUTWD/tormes.log
  grep -c ">" $OUTWD/genomes/${i}.fasta >> $OUTWD/tormes.log
done

fi


# Importing genomes from metadata if existing
GENOMETADATA=$OUTWD/genomes.tmp
GENOMES="$(<$OUTWD/genomes-list.tmp)"
if [ -s "$GENOMETADATA" ]; then
  if [ ! -d "$OUTWD/genomes" ]; then
  		mkdir $OUTWD/genomes
  fi
	for i in $GENOMES; do
		DIRG="$( grep -w "^$i" $GENOMETADATA | cut -f 3 -d "$TAB" )"
		if [[ $DIRG =~ \.gz$ ]]; then
		    cp -f $DIRG $OUTWD/genomes/$i.fasta.gz
		    gzip -d $OUTWD/genomes/$i.fasta.gz
		else
		    cp -f $DIRG $OUTWD/genomes/$i.fasta
		fi
	done
	cat $OUTWD/reads-list.tmp $OUTWD/genomes-list.tmp > $OUTWD/list.tmp
	echo -e "\n---Genomes provided in metadata imported to the analysis successfully---\n"
  sleep 1
  echo -e "\nGenomes from metadata imported to TORMES at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
else
	cp -f $OUTWD/reads-list.tmp $OUTWD/list.tmp
fi

####### REDEFINE list.tmp and $SAMPLE
SAMPLE="$(<$OUTWD/list.tmp)"

#Imported genome stats
if [ -s "$GENOMETADATA" ]; then
  if [ ! -d "$OUTWD/genome_stats" ]; then
    mkdir $OUTWD/genome_stats
  fi
  for i in $GENOMES; do
    $QUAST $OUTWD/genomes/${i}.fasta -o $OUTWD/genome_stats/${i}_genome_stats -t $CPUS --min-contig 200 --no-icarus --silent --no-sv
    echo -e "${TAB}${TAB}- Number of contigs in genome ${i}: \c" >> $OUTWD/tormes.log
    grep -c ">" $OUTWD/genomes/${i}.fasta >> $OUTWD/tormes.log
  done
fi

## SEQUENCING AND ASSSEMBLY REPORT
if [ -s "$READMETADATA" ]; then
  for i in $READS; do
    tail -n +2 $OUTWD/cleaned_reads/$i\.ok.stats >> $OUTWD/temp1
    tail -n +2 $OUTWD/genome_stats/$i\_genome_stats/transposed_report.tsv | awk -v OFS="$TAB" -F "$TAB" '{print $14,$16,$15,$18,$17}' >> $OUTWD/temp2
  done
  paste -d "$TAB" $OUTWD/reads-list.tmp $OUTWD/temp1 $OUTWD/temp2 | awk -v OFS="$TAB" -F "$TAB" '{print $0, $9=$2*$3/$5}' | awk -v OFS="$TAB" -F "$TAB" '{gsub(/\..*$/,"X",$9)}1' > $OUTWD/sequencing_assembly_report.txt
  rm -f $OUTWD/temp1 $OUTWD/temp2
fi

if [ -s "$GENOMETADATA" ]; then
  for i in $GENOMES; do
    echo "$i" > $OUTWD/temp1
    tail -n +2 $OUTWD/genome_stats/${i}_genome_stats/transposed_report.tsv | awk -v OFS="$TAB" -F "$TAB" '{print $14,$16,$15,$18,$17}' > $OUTWD/temp2
    echo "NA" > $OUTWD/temp3
    paste -d "${TAB}" $OUTWD/temp1 $OUTWD/temp3 $OUTWD/temp3 $OUTWD/temp2 $OUTWD/temp3 > $OUTWD/temp4
    cat $OUTWD/temp4 >> $OUTWD/temp5
    rm -f $OUTWD/temp1 $OUTWD/temp2 $OUTWD/temp3 $OUTWD/temp4
  done
  cat $OUTWD/temp5 >> $OUTWD/sequencing_assembly_report.txt
  rm -f $OUTWD/temp5
fi

# Solved issue with first line missing in the sequencing_assembly_report.txt when using only genomes
sed -i "1iISOLATE${TAB}READS${TAB}AvgReadLen${TAB}CONTIGS${TAB}GenomeLength${TAB}LargestContig${TAB}N50${TAB}GC${TAB}DEPTH" $OUTWD/sequencing_assembly_report.txt

## CONTIG ORDERING
if [ ! -z $REFERENCE ]; then
	echo -e "Contig ordering against reference started at: \c" >> $OUTWD/tormes.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* progressiveMauve, [A.E. Darling *et al*., 2010](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0011147)" >> $OUTWD/citations.txt
	mkdir -p $OUTWD/genome_ordering
	$PARALLEL -a $OUTWD/list.tmp -j $CPUS java -Xmx500m -cp $MAUVE org.gel.mauve.contigs.ContigOrderer -output $OUTWD/genome_ordering/{} -ref $REFERENCE -draft $OUTWD/genomes/{}.fasta
	for i in $SAMPLE; do
		ls -dt $OUTWD/genome_ordering/$i/* | tail -n +2 | xargs rm -rf
		tr '[:lower:]' '[:upper:]' < $OUTWD/genome_ordering/$i/*/$i.fasta > $OUTWD/genome_ordering/$i.ordered.fasta
		sed -i "s/LENGTH/length/" $OUTWD/genome_ordering/$i.ordered.fasta
		sed -i "s/COV/cov/" $OUTWD/genome_ordering/$i.ordered.fasta
		if [ -s $OUTWD/genome_ordering/$i.ordered.fasta ]; then
		    mv $OUTWD/genome_ordering/$i.ordered.fasta $OUTWD/genomes/$i.fasta
		else
		    echo -e "WARNING: $i genome couldn't be ordered. Not ordered genome will be used instead" >> $OUTWD/tormes.log
		fi
	done
fi
#$PARALLEL -j $CPUS -a $OUTWD/list.tmp --gnu tar cfz $OUTWD/genome_ordering/{}.tgz -C $OUTWD/genome_ordering/ {}
$PARALLEL -j $CPUS -a $OUTWD/list.tmp --gnu rm -rf $OUTWD/genome_ordering/


## rRNA genes identification
echo -e "* Barrnap, [T. Seemann](https://github.com/tseemann/barrnap)" >> $OUTWD/citations.txt

mkdir $OUTWD/rRNA-genes
for i in 5S 16S 23S; do
  mkdir $OUTWD/rRNA-genes/${i}-rRNA
done

for i in $SAMPLE; do
  barrnap --threads $CPUS --outseq $OUTWD/genomes/${i}.all-rRNA.fasta $OUTWD/genomes/${i}.fasta
  rm $OUTWD/genomes/${i}.fasta.fai
  for j in 5S 16S 23S; do
    grep -A 1 "${j}_rRNA" $OUTWD/genomes/${i}.all-rRNA.fasta > $OUTWD/rRNA-genes/${j}-rRNA/${i}.${j}-rRNA.fasta
    sed -i "s/^>${j}/>${i}-${j}/" $OUTWD/rRNA-genes/${j}-rRNA/${i}.${j}-rRNA.fasta
  done
  rm $OUTWD/genomes/${i}.all-rRNA.fasta
done


## TAXONOMIC IDENTIFICATION FROM READS AND GENOMES WITH KRAKEN2
echo -e "\nTaxonomic identification started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
echo -e "* Kraken2, [Wood *et al*., 2019](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1891-0)" >> $OUTWD/citations.txt

mkdir -p $OUTWD/taxonomic_identification/
export KRAKEN2_DEFAULT_DB="$KRAKENDB"

if [ -s "$READMETADATA" ]; then
  for i in $READS; do
    $KRAKEN2 --paired $OUTWD/cleaned_reads/${i}.ok_1.fastq.gz $OUTWD/cleaned_reads/${i}.ok_2.fastq.gz --db $KRAKENDB --threads $CPUS --report $OUTWD/taxonomic_identification/${i}.kraken-report.txt &>>/dev/null
    echo "${i}${TAB}$(grep "${TAB}F${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 6 | sed "s/  //g" | head -n 1) ($(grep "${TAB}F${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 1 | head -n 1 | sed "s/ //g")%)${TAB}$(grep "${TAB}G${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 6 | sed "s/  //g" | head -n 1) ($(grep "${TAB}G${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 1 | head -n 1 | sed "s/ //g")%)${TAB}$(grep "${TAB}S${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 6 | sed "s/  //g" | head -n 1) ($(grep "${TAB}S${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 1 | head -n 1 | sed "s/ //g")%)" >> $OUTWD/taxonomic_identification/taxonomic-identification.txt
  done
fi
if [ -s "$GENOMETADATA" ]; then
  for i in $GENOMES; do
    $KRAKEN2 $OUTWD/genomes/${i}.fasta --db $KRAKENDB --threads $CPUS --report $OUTWD/taxonomic_identification/${i}.kraken-report.txt &>>/dev/null
    echo "${i}${TAB}$(grep "${TAB}F${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 6 | sed "s/  //g" | head -n 1) ($(grep "${TAB}F${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 1 | head -n 1 | sed "s/ //g")%)${TAB}$(grep "${TAB}G${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 6 | sed "s/  //g" | head -n 1) ($(grep "${TAB}G${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 1 | head -n 1 | sed "s/ //g")%)${TAB}$(grep "${TAB}S${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 6 | sed "s/  //g" | head -n 1) ($(grep "${TAB}S${TAB}" $OUTWD/taxonomic_identification/${i}.kraken-report.txt | cut -f 1 | head -n 1 | sed "s/ //g")%)" >> $OUTWD/taxonomic_identification/taxonomic-identification.txt
  done
fi

sed -i "1iIsolate${TAB}Family${TAB}Genus${TAB}Species" $OUTWD/taxonomic_identification/taxonomic-identification.txt
mv $OUTWD/taxonomic_identification/taxonomic-identification.txt $OUTWD/taxonomic_identification/taxonomic-identification-kraken2.txt

## TAXONOMIC IDENTIFICATION FROM READS AND GENOMES WITH RDP
echo -e "* RDP Classifier, [Q. Wang *et al*., 2007](https://aem.asm.org/content/73/16/5261)" >> $OUTWD/citations.txt
for i in $SAMPLE; do
  $RDPCLASSIFIER classify $OUTWD/rRNA-genes/16S-rRNA/${i}.16S-rRNA.fasta -o $OUTWD/taxonomic_identification/${i}.16S-rRNA.RDP.txt -f filterbyconf -c 0.8 -g 16srrna
  tail -n+2 $OUTWD/taxonomic_identification/${i}.16S-rRNA.RDP.txt >> $OUTWD/taxonomic_identification/all.16S-rRNA.RDP.tmp
done

cut -f 1 $OUTWD/taxonomic_identification/all.16S-rRNA.RDP.tmp | sed "s/::/${TAB}/" | sed "s/:/${TAB}/" | sed "s/(/${TAB}(/" > $OUTWD/temp1
cut -f 5,6,7 $OUTWD/taxonomic_identification/all.16S-rRNA.RDP.tmp > $OUTWD/temp2
sed -i "s/\"//g" $OUTWD/temp2
paste $OUTWD/temp1 $OUTWD/temp2 > $OUTWD/taxonomic_identification/taxonomic-identification-16S-rRNA.RDP.txt
rm $OUTWD/taxonomic_identification/all.16S-rRNA.RDP.tmp $OUTWD/temp1 $OUTWD/temp2
sed -i "1iGene${TAB}Contig${TAB}Position${TAB}Strand${TAB}Order${TAB}Family${TAB}Genus" $OUTWD/taxonomic_identification/taxonomic-identification-16S-rRNA.RDP.txt


## MLST
if [ "$DOMLST" -ne "0" ] ; then
	echo -e "\nMLST started at: \c" >> $OUTWD/tormes.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* mlst, [T. Seemann](https://github.com/tseemann/mlst)" >> $OUTWD/citations.txt
	mkdir -p $OUTWD/mlst
  	if [ "$GENERA" == 'Escherichia' ]; then
		$PARALLEL -j $CPUS -a $OUTWD/list.tmp $MLST $OUTWD/genomes/{}\.fasta --scheme ecoli --nopath --quiet > $OUTWD/mlst/mlst-temp-1.tab
		$PARALLEL -j $CPUS -a $OUTWD/list.tmp $MLST $OUTWD/genomes/{}\.fasta --scheme ecoli_2 --nopath --quiet > $OUTWD/mlst/mlst-temp-2.tab
		sed -i 's/\.fasta//' $OUTWD/mlst/mlst-temp-1.tab
		sed -i 's/\.fasta//' $OUTWD/mlst/mlst-temp-2.tab
		sort $OUTWD/mlst/mlst-temp-1.tab > $OUTWD/mlst/mlst-1.tab
		sort $OUTWD/mlst/mlst-temp-2.tab > $OUTWD/mlst/mlst-2.tab
	else
		$PARALLEL -j $CPUS -a $OUTWD/list.tmp $MLST $OUTWD/genomes/{}\.fasta --nopath --quiet > $OUTWD/mlst/mlst-temp.tab
		sed -i 's/\.fasta//' $OUTWD/mlst/mlst-temp.tab
		sort $OUTWD/mlst/mlst-temp.tab > $OUTWD/mlst/mlst.tab
	fi
	rm -f $OUTWD/mlst/mlst-temp*tab
fi

## ANTIMICROBIAL RESISTANCE AND VIRULENCE GENES
echo -e "\nAntimicrobial resistance and virulence genes search started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
echo -e "* ABRicate, [T. Seemann](https://github.com/tseemann/abricate)" >> $OUTWD/citations.txt
echo -e "* ResFinder database, [E. Zankari *et al*., 2012](https://www.ncbi.nlm.nih.gov/pubmed/22782487)" >> $OUTWD/citations.txt
echo -e "* CARD database, [A.G. McArthur *et al*., 2013](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3697360/)" >> $OUTWD/citations.txt
echo -e "* ARG-ANNOT database, [S.K. Gupta *et al*., 2014](https://www.ncbi.nlm.nih.gov/pubmed/24145532)" >> $OUTWD/citations.txt
echo -e "* VFDB database, [L. Chen *et al*., 2005](https://www.ncbi.nlm.nih.gov/pubmed/15608208)" >> $OUTWD/citations.txt

mkdir -p $OUTWD/antimicrobial_resistance_genes
for i in resfinder card argannot; do
	mkdir -p $OUTWD/antimicrobial_resistance_genes/$i
	$PARALLEL -j $CPUS -a $OUTWD/list.tmp --results $OUTWD/antimicrobial_resistance_genes/$i/{}\_$i.tab $ABRICATE $OUTWD/genomes/{}.fasta --db $i --minid $GENEMINID --mincov $GENEMINCOV --nopath
	rm -f $OUTWD/antimicrobial_resistance_genes/$i/*err $OUTWD/antimicrobial_resistance_genes/$i/*seq
	for j in $SAMPLE; do
		sed -i 's/.fasta//' $OUTWD/antimicrobial_resistance_genes/$i/${j}_${i}.tab
	done
done

mkdir -p $OUTWD/virulence_genes
$PARALLEL -j $CPUS -a $OUTWD/list.tmp --results $OUTWD/virulence_genes/{}\_vfdb.tab $ABRICATE $OUTWD/genomes/{}.fasta --db vfdb --minid $GENEMINID --mincov $GENEMINCOV --nopath
rm -f $OUTWD/virulence_genes/*err $OUTWD/virulence_genes/*seq
for i in $SAMPLE; do
	sed -i 's/\.fasta//' $OUTWD/virulence_genes/${i}_vfdb.tab
done

## CUSTOM GENES SEARCH
if [ ! -z "$GENESDB" ]; then
  for i in $GENESDB; do
    echo $i >> $OUTWD/custom_genes_db.tmp
  done
  $TORMESCUSTOMGENES $TORMESDIR $OUTWD $CONFIG $CPUS $OUTWD/custom_genes_db.tmp $GENEMINID $GENEMINCOV
fi


## GENE PREDICTION
echo -e "* Prodigal, [Hyatt *et al*., 2010](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2848648/)" >> $OUTWD/citations.txt
if [ "$ONLYGENEPRED" == "0" ] ; then
	echo -e "\nGene prediction started at: \c" >> $OUTWD/tormes.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  mkdir -p $OUTWD/gene_prediction
  $PARALLEL -j $CPUS -a $OUTWD/list.tmp $PRODIGAL -i $OUTWD/genomes/{}.fasta -a $OUTWD/gene_prediction/{}.faa -d $OUTWD/gene_prediction/{}.nt -f gff -o $OUTWD/gene_prediction/{}.gff $PRODIGALOPTS
fi

## ANNOTATION
if [ "$ONLYGENEPRED" -ne "0" ] ; then
  echo -e "\nGene prediction and nnotation started at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* Prokka, [T. Seemann, 2014](https://www.ncbi.nlm.nih.gov/pubmed/24642063)" >> $OUTWD/citations.txt
  mkdir -p $OUTWD/annotation
  for i in $SAMPLE; do
#   sed 's/_cov.*//g' $OUTWD/genomes/$i.fasta > $OUTWD/annotation/$i\_prokka.fasta
#	  sed -i 's/NODE/N/g' $OUTWD/annotation/$i\_prokka.fasta
	  if [ ! -z $GENERA ]; then
	     $PROKKA $OUTWD/genomes/${i}.fasta --outdir $OUTWD/annotation/${i}_annotation --prefix $i --locustag $i --genus $GENERA --usegenus --cpus $CPUS --force
	     else
	     $PROKKA $OUTWD/genomes/${i}.fasta --outdir $OUTWD/annotation/${i}_annotation --prefix $i --locustag $i --cpus $CPUS --force
	  fi
#	  rm -f $OUTWD/annotation/$i\_prokka.fasta
    if [ ! -s $OUTWD/annotation/${i}_annotation/${i}.gff ]; then
      echo -e "WARNING: ${i} did not succeeded annotation, please check" >> $OUTWD/tormes.log
    fi
  done
fi

## PANGENOME
if [ "$ONLYGENEPRED" == "0" ] ; then
  echo -e "\nPangenome analysis was disabled as --only_gene_prediction option was used" >> $OUTWD/tormes.log
fi

if [ $(ls $OUTWD/genomes/ | wc -l) -lt 3 ]; then
	DOPANGENOME=0
	echo -e "\nWARNING: Pangenome analysis was skipped automatically due to low number of genomes to compare at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "\n WARNING: Pangenome analysis was skipped automatically due to low number of genomes to compare. \n"
  sleep 1
fi

if [ "$DOPANGENOME" -ne "0" ] ; then
	echo -e "\nPangenome analysis started at: \c" >> $OUTWD/tormes.log
	date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* Roary, [A.J. Page *et al*., 2015](https://www.ncbi.nlm.nih.gov/pubmed/26198102)" >> $OUTWD/citations.txt
	mkdir -p $OUTWD/gff
	ln -s $OUTWD/annotation/*/*gff $OUTWD/gff/
	$ROARY -e --mafft -f $OUTWD/pangenome -p $CPUS $OUTWD/gff/*gff
	$FASTTREE -nt -gtr $OUTWD/pangenome/core_gene_alignment.aln > $OUTWD/pangenome/core_gene_alignment.newick
	$ROARY2SVG $OUTWD/pangenome/gene_presence_absence.csv --colour=Blue > $OUTWD/pangenome/pangenome.svg
	$CONVERT $OUTWD/pangenome/pangenome.svg $OUTWD/pangenome/pangenome.png
	rm -rf $OUTWD/gff
fi

### SPECIAL ANALYSIS FOR GENERA

## ESCHERICHIA
if [ "$GENERA" == 'Escherichia' ]; then
	# Serotyping
	echo -e "\nSerotyping started at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* SerotypeFinder, [Joensen *et al*., 2015](https://www.ncbi.nlm.nih.gov/pubmed/25972421)" >> $OUTWD/citations.txt
	mkdir -p $OUTWD/serotyping
  for i in $SAMPLE; do
      mkdir -p $OUTWD/serotyping/$i
	    python $SEROTYPEFINDER -p $SEROTYPEFINDERDB -mp $BLASTBINS/blastn -i $OUTWD/genomes/$i.fasta -o $OUTWD/serotyping/$i -x
      cut -f 3,4 $OUTWD/serotyping/$i/results_tab.tsv > $OUTWD/serotyping/$i/results_tab.tmp
	    for j in H O; do
		      cut -f 1 -d $'\t' $OUTWD/serotyping/$i/results_tab.tmp | grep "$j" >> $OUTWD/serotyping/$i/${j}_temp
		      for k in $(<$OUTWD/serotyping/$i/${j}_temp); do
		          grep "$k" $OUTWD/serotyping/$i/results_tab.tmp >> $OUTWD/serotyping/$i/${j}_temp2
		      done
	    	  sort -u -k 2 -rn $OUTWD/serotyping/$i/${j}_temp2 | head -n 1 | awk '{print $1}' > $OUTWD/serotyping/$i/${j}_temp3
	    done
	    echo $i > $OUTWD/serotyping/$i/temp4
      paste -d $'\t' $OUTWD/serotyping/$i/temp4 $OUTWD/serotyping/$i/H_temp3 $OUTWD/serotyping/$i/O_temp3 > $OUTWD/serotyping/$i/${i}_serotype
      cat $OUTWD/serotyping/$i/$i\_serotype >> $OUTWD/serotyping/serotyping.txt
      rm -f $OUTWD/serotyping/$i/*temp* $OUTWD/serotyping/$i/results_tab.tmp
  done
	sed -i "1iISOLATE${TAB}H-antigen${TAB}O-antigen" $OUTWD/serotyping/serotyping.txt
  if [ ! -s $OUTWD/serotyping/serotyping.txt ]; then
    echo "WARNING: serotyping was not performed" >> $OUTWD/tormes.log
  fi

	# FimH-typing
	echo -e "\nFimH typing started at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* FimTyper, [Center for Genomic Epidemiology, CGE](https://bitbucket.org/genomicepidemiology/fimtyper)" >> $OUTWD/citations.txt
	mkdir -p $OUTWD/fimH_typing
	for i in $SAMPLE; do
	    mkdir -p $OUTWD/fimH_typing/$i
	    perl $FIMTYPER -d $FIMTYPERDB -b $BLASTBINS/../ -i $OUTWD/genomes/$i\.fasta -o $OUTWD/fimH_typing/$i -k 95.00 -l 0.80
	    sed "s/^FimH/$i${TAB}FimH/" $OUTWD/fimH_typing/$i/results_tab.txt | head -n 1 >> $OUTWD/fimH_typing/fimH_typing.txt
	done
  if [ ! -s $OUTWD/fimH_typing/fimH_typing.txt ]; then
    echo "WARNING: FimH typing was not performed" >> $OUTWD/tormes.log
  fi

	# PlasmidFinder
	echo -e "\nPlasmid search started at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* PlasmidFinder database, [A. Carattoli *et al*., 2014](https://www.ncbi.nlm.nih.gov/pubmed/24777092)" >> $OUTWD/citations.txt
	mkdir -p $OUTWD/plasmids
	$PARALLEL -j $CPUS -a $OUTWD/list.tmp --results $OUTWD/plasmids/{}\_plasmids.tab $ABRICATE $OUTWD/genomes/{}.fasta --db plasmidfinder --minid $GENEMINID --mincov $GENEMINCOV --nopath
        rm -f $OUTWD/plasmids/*err $OUTWD/plasmids/*seq
	for i in $SAMPLE; do
	    sed -i 's/.fasta//' $OUTWD/plasmids/${i}_plasmids.tab
  done

	# PointFinder
	echo -e "\nPoint mutation search started at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* PointFinder, [E. Zankari *et al*., 2017](https://www.ncbi.nlm.nih.gov/pubmed/29091202)" >> $OUTWD/citations.txt
	mkdir -p $OUTWD/point_mutations
	for i in $SAMPLE; do
	    mkdir -p $OUTWD/point_mutations/${i}
	    python $POINTFINDER -i $OUTWD/genomes/${i}.fasta -p $POINTFINDERDB -m blastn -m_p $BLASTBINS/blastn -s escherichia_coli -o $OUTWD/point_mutations/${i}
      rm -rf $OUTWD/point_mutations/${i}/tmp
      mv -f $OUTWD/point_mutations/${i}/*_blastn_results.tsv $OUTWD/point_mutations/${i}/${i}_PointFinder_results.txt
      if [ -s $OUTWD/point_mutations/${i}/${i}_PointFinder_results.txt ]; then
        echo "" >> $OUTWD/point_mutations/${i}/${i}_PointFinder_results.txt
      else
        echo "WARNING: Point mutations analysis for ${i} was not performed" >> $OUTWD/tormes.log
      fi
	done
fi

## SALMONELLA
if [ "$GENERA" == 'Salmonella' ]; then
  # Serotyping
  echo -e "\nSerotyping started at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* SISTR, [C.E. Yoshida *et al*., 2016](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0147101)" >> $OUTWD/citations.txt
  mkdir -p $OUTWD/serotyping
	$PARALLEL -j $CPUS -a $OUTWD/list.tmp $SISTR --qc -f tab -o $OUTWD/serotyping/{}\_serotype.tab $OUTWD/genomes/{}.fasta
	for i in $SAMPLE; do
	    tail -n+2 $OUTWD/serotyping/$i\_serotype.tab >> $OUTWD/temp1
	done
	awk -v OFS="$TAB" -F "$TAB" '{print $8,$6,$15,$14,$9,$10,$11,$13}' $OUTWD/temp1 | sed "1iISOLATE${TAB}SUBSPECIE${TAB}SEROVAR${TAB}SEROGROUP${TAB}H1${TAB}H2${TAB}O-ANTIGEN${TAB}QUALITY CONTROL" > $OUTWD/serotyping/serotyping.txt
  if [ ! -s $OUTWD/serotyping/serotyping.txt ]; then
    echo "WARNING: serotyping was not performed" >> $OUTWD/tormes.log
  fi
	rm -f $OUTWD/temp1

  # PlasmidFinder
  echo -e "\nPlasmid search started at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* PlasmidFinder database, [A. Carattoli *et al*., 2014](https://www.ncbi.nlm.nih.gov/pubmed/24777092)" >> $OUTWD/citations.txt
  mkdir -p $OUTWD/plasmids
  $PARALLEL -j $CPUS -a $OUTWD/list.tmp --results $OUTWD/plasmids/{}\_plasmids.tab $ABRICATE $OUTWD/genomes/{}.fasta --db plasmidfinder --minid $GENEMINID --mincov $GENEMINCOV --nopath
  rm -f $OUTWD/plasmids/*err $OUTWD/plasmids/*seq
  for i in $SAMPLE; do
    sed -i 's/.fasta//' $OUTWD/plasmids/${i}_plasmids.tab
  done

  # PointFinder
  echo -e "\nPoint mutation search started at: \c" >> $OUTWD/tormes.log
  date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
  echo -e "* PointFinder, [E. Zankari *et al*., 2017](https://www.ncbi.nlm.nih.gov/pubmed/29091202)" >> $OUTWD/citations.txt
  mkdir -p $OUTWD/point_mutations
  for i in $SAMPLE; do
      mkdir -p $OUTWD/point_mutations/${i}
      python $POINTFINDER -i $OUTWD/genomes/${i}.fasta -p $POINTFINDERDB -m blastn -m_p $BLASTBINS/blastn -s salmonella -o $OUTWD/point_mutations/${i}
      rm -rf $OUTWD/point_mutations/${i}/tmp
      mv -f $OUTWD/point_mutations/${i}/*_blastn_results.tsv $OUTWD/point_mutations/${i}/${i}_PointFinder_results.txt
      if [ -s $OUTWD/point_mutations/${i}/${i}_PointFinder_results.txt ]; then
        echo "" >> $OUTWD/point_mutations/${i}/${i}_PointFinder_results.txt
      else
        echo "WARNING: Point mutations analysis for ${i} was not performed" >> $OUTWD/tormes.log
      fi
  done
fi

## KLEBSIELLA
if [ "$GENERA" == 'Klebsiella' ]; then
  $TORMESKLEBSIELLA $TORMESDIR $OUTWD $CONFIG $CPUS
fi

# TORMES REPORT
echo -e "\nTormes report started at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log

cat<<EOF >> $OUTWD/citations.txt
* R, [R Development Core Team, 2008](https://www.r-project.org/)
  + ggplot2, [H. Wickham, 2009](https://cran.r-project.org/web/packages/ggplot2/index.html)
  + ggtree, [G. Yu *et al*., 2016](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12628)
  + knitr, [Y. Xie, 2015](https://cran.r-project.org/web/packages/knitr/index.html)
  + plotly, [C. Sievert *et al*., 2017](https://cran.r-project.org/web/packages/plotly/index.html)
  + RColorBrewer, [E. Neuwirth and R.C. Brewer, 2014](https://cran.r-project.org/web/packages/RColorBrewer/index.html)
  + reshape2, [H. Wickham, 2007](https://cran.r-project.org/web/packages/reshape2/index.html)
  + rmarkdown, [J.J. Allaire, 2015](https://cran.r-project.org/web/packages/rmarkdown/index.html)
  + treeio, [L-G. Wang *et al*., 2019](https://academic.oup.com/mbe/article-abstract/37/2/599/5601621?redirectedFrom=fulltext)
EOF

if [ ! -z "$TITLEFILE" ]; then
	TITLE="$(<$TITLEFILE)"
else
	TITLE="\n$GENERA Analysis Performed on $DATE"
fi
echo $TITLE > $OUTWD/title_tormes.tmp
$TORMESREPORT $OUTWD $METADATA $ABRICATE $TORMESDIR $GENERA
echo -e "$RSCRIPT -e 'library(rmarkdown); rmarkdown::render(\"$OUTWD/report_files/tormes_report.Rmd\", \"html_document\", encoding=\"UTF-8\")'" > $OUTWD/render_report.sh
chmod 755 $OUTWD/render_report.sh
$OUTWD/render_report.sh

if [ -s $OUTWD/report_files/tormes_report.html ]; then
	cp -f $OUTWD/report_files/tormes_report.html $OUTWD/tormes_report.html
else
	echo -e "WARNING: html report file could not be created" >> $OUTWD/tormes.log
fi

# Retain render_report.sh for make it easier for users to customize reports
mv -f $OUTWD/render_report.sh $OUTWD/report_files/render_report.sh
tar cfz $OUTWD/report_files.tgz -C $OUTWD/ report_files
#rm -f $OUTWD/render_report.sh
rm -rf $OUTWD/report_files

## Cleaning the house before finishing
rm -f $OUTWD/list.tmp $OUTWD/reads-list.tmp $OUTWD/genomes-list.tmp $OUTWD/reads.tmp $OUTWD/genomes.tmp
if [ -e $OUTWD/title_tormes.tmp ]; then
	rm -f $OUTWD/title_tormes.tmp
fi

echo -e "\nTORMES pipeline finished at: \c" >> $OUTWD/tormes.log
date +"%Y-%m-%d %H:%M" >> $OUTWD/tormes.log
echo -e "\nThank you for using TORMES!" >> $OUTWD/tormes.log
